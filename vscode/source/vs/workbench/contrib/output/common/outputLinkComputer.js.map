{"version":3,"sources":["vs/workbench/contrib/output/common/fake","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/async.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/network.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/process.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/path.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/extpath.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/map.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/glob.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/base/common/resources.ts","vs/workbench/contrib/output/common/file:/Users/zhengfankai/Desktop/workspace/vs-editor/src/vs/workbench/contrib/output/common/outputLinkComputer.ts"],"names":["__m","__M","deps","result","i","len","length","isThenable","obj","then","createCancelablePromise","callback","source","cancellation_1","CancellationTokenSource","thenable","token","promise","Promise","resolve","reject","onCancellationRequested","errors","canceled","value","dispose","err","[object Object]","cancel","this","undefined","onfinally","finally","timeout","millis","handle","setTimeout","clearTimeout","sequence","promiseFactories","thenHandler","results","push","n","index","exports","asPromise","item","Throttler","activePromise","queuedPromise","queuedPromiseFactory","promiseFactory","onComplete","queue","c","e","Sequencer","current","promiseTask","Delayer","defaultDelay","completionPromise","doResolve","task","delay","cancelTimeout","doReject","ThrottledDelayer","delayer","throttler","trigger","isTriggered","Barrier","_isOpen","_promise","_completePromise","disposableTimeout","handler","timer","lifecycle_1","toDisposable","ignoreErrors","_","first","shouldStop","t","defaultValue","loop","factory","Limiter","maxDegreeOfParalellism","_size","outstandingPromises","runningPromises","_onFinished","event_1","Emitter","onFinished","event","size","consume","iLimitedTask","shift","consumed","fire","Queue","super","ResourceQueue","queues","Object","create","resource","key","toString","TimeoutTimer","Disposable","runner","_token","setIfNotSet","IntervalTimer","clearInterval","interval","setInterval","RunOnceScheduler","timeoutToken","timeoutHandler","onTimeout","bind","isScheduled","doRun","RunOnceWorker","units","unit","schedule","nfcall","fn","args","ninvoke","thisArg","call","requestIdleCallback","cancelIdleCallback","dummyIdle","freeze","didTimeout","timeRemaining","runWhenIdle","disposed","IdleValue","executor","_executor","_value","_error","_didRun","_handle","Schemas","inMemory","vscode","internal","walkThrough","walkThroughSnippet","http","https","file","mailto","untitled","data","command","safeProcess","process","cwd","env","platform","platform_1","isWindows","isMacintosh","nextTick","setImmediate","validateString","name","ErrorInvalidArgType","isPathSeparator","code","CHAR_FORWARD_SLASH","CHAR_BACKWARD_SLASH","isPosixPathSeparator","isWindowsDeviceRoot","CHAR_UPPERCASE_A","CHAR_UPPERCASE_Z","CHAR_LOWERCASE_A","CHAR_LOWERCASE_Z","normalizeString","path","allowAboveRoot","separator","res","lastSegmentLength","lastSlash","dots","charCodeAt","CHAR_DOT","lastSlashIndex","lastIndexOf","slice","_format","sep","pathObject","dir","root","base","ext","Error","expected","actual","determiner","indexOf","replace","msg","win32","pathSegments","resolvedDevice","resolvedTail","resolvedAbsolute","toLowerCase","rootEnd","device","isAbsolute","j","last","firstPart","tail","paths","joined","arg","needsReplace","slashCount","firstLen","normalize","from","to","fromOrig","toOrig","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","out","resolvedPath","end","matchedSlash","offset","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","ret","delimiter","posix","trailingSeparator","arguments","toNamespacedPath","hasRoot","join","relative","dirname","basename","extname","format","parse","isWindowsDriveLetter","char0","toSlashes","osPath","path_1","getRoot","firstLetter","pos","isUNC","isNaN","INVALID_FILE_CHARS","WINDOWS_FORBIDDEN_NAMES","isValidBasename","test","lastIndex","trim","isEqual","pathA","pathB","ignoreCase","identityEquals","strings_1","equalsIgnoreCase","isEqualOrParent","candidate","startsWithIgnoreCase","sepOffset","charAt","values","forEachable","forEach","keys","map","getOrSet","get","set","mapToString","entries","setToString","mapToSerializable","serializable","serializableToMap","items","Map","StringIterator","_pos","a","PathIterator","_from","_to","next","justSeps","ch","aPos","aLen","thisPos","cmp","substring","TernarySearchTreeNode","left","mid","right","TernarySearchTree","segments","_iter","_root","element","iter","reset","node","segment","val","hasNext","oldElement","stack","isEmpty","parent","pop","_nodeIterator","idx","_forEach","iterator_1","FIN","done","ResourceMap","toKey","has","clear","delete","clb","k","uri_1","URI","resourceMap","Touch","LinkedMap","_map","_head","_tail","touch","previous","addItemLast","addItemFirst","remove","removeItem","callbackfn","newSize","currentSize","LRUCache","limit","ratio","_limit","_ratio","Math","min","max","checkTrim","trimOld","round","starsToRegExp","starCount","NO_PATH_REGEX","PATH_REGEX","splitGlobAware","pattern","splitChar","inBraces","inBrackets","curVal","char","parseRegExp","regEx","GLOB_SPLIT","every","s","GLOBSTAR","previousSegmentWasGlobStar","braceVal","bracketVal","braceRegExp","strings","escapeRegExpCharacters","parsePattern","arg1","options","NULL","patternKey","trimForExclusions","parsedPattern","CACHE","wrapRelativePattern","match","T1","substr","endsWith","T2","exec","originalPattern","slashBase","backslashBase","basenames","patterns","allBasenames","trivia2","T3_2","T3","parsedPatterns","aggregateBasenameMatches","split","filter","withBasenames","arrays","allPaths","reduce","all","concat","trivia3","T4","trivia4and5","T5","regExp","RegExp","error","toRegExp","arg2","extpath","matchPathEnds","nativePath","ALL_FORWARD_SLASHES","nativePathEnd","FALSE","isRelativePattern","resultPattern","expression","getOwnPropertyNames","when","hasSibling","clausePattern","matched","async_1","m","requiresSiblings","parseExpressionPattern","some","resultExpression","parsedExpression","listToMap","list","rp","basenamePatterns","aggregate","aggregatedPatterns","getEmptyExpression","map_1","hasSiblingPromiseFn","siblingsFn","siblings","hasSiblingFn","parseToAsync","getBasenameTerms","patternOrExpression","getPathTerms","hasToIgnoreCase","scheme","network_1","isLinux","parentCandidate","originalFSPath","isEqualAuthority","authority","a1","a2","uri","uriPath","hasTrailingPathSeparator","fsp","p","relativePath","getComparisonKey","basenameOrAuthority","second","p1","p2","console","with","joinPath","pathFragment","joinedPath","normalizePath","normalizedPath","isAbsolutePath","removeTrailingPathSeparator","resolvePath","distinctParents","resourceAccessor","candidateResource","otherItem","DataUri","META_DATA_LABEL","META_DATA_DESCRIPTION","META_DATA_SIZE","META_DATA_MIME","parseMetaData","dataUri","metadata","property","mime","ResourceGlobMatcher","globalExpression","rootExpressions","expressionsByRoot","forPaths","glob_1","rootExpression","findSubstr","OutputLinkComputer","ctx","createData","computePatterns","workspaceFolders","r","workspaceFolder","createPatterns","models","getMirrorModels","model","getModel","links","lines","getValue","folderPatterns","folderUri","resourceCreator","toResource","folderRelativePath","resources","detectLinks","workspaceFolderPath","fsPath","workspaceFolderVariants","workspaceFolderVariant","pathPattern","line","lineIndex","rtrim","resourceString","lineNumber","columnNumber","fullMatch","linkRange","startColumn","startLineNumber","endColumn","endLineNumber","link","range_1","Range","areIntersectingOrTouching","range","url"],"mappings":"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","file":"outputLinkComputer.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport * as errors from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\n\nexport function isThenable<T>(obj: any): obj is Promise<T> {\n\treturn obj && typeof (<Promise<any>>obj).then === 'function';\n}\n\nexport interface CancelablePromise<T> extends Promise<T> {\n\tcancel(): void;\n}\n\nexport function createCancelablePromise<T>(callback: (token: CancellationToken) => Promise<T>): CancelablePromise<T> {\n\tconst source = new CancellationTokenSource();\n\n\tconst thenable = callback(source.token);\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tsource.token.onCancellationRequested(() => {\n\t\t\treject(errors.canceled());\n\t\t});\n\t\tPromise.resolve(thenable).then(value => {\n\t\t\tsource.dispose();\n\t\t\tresolve(value);\n\t\t}, err => {\n\t\t\tsource.dispose();\n\t\t\treject(err);\n\t\t});\n\t});\n\n\treturn new class implements CancelablePromise<T> {\n\t\tcancel() {\n\t\t\tsource.cancel();\n\t\t}\n\t\tthen<TResult1 = T, TResult2 = never>(resolve?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, reject?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2> {\n\t\t\treturn promise.then(resolve, reject);\n\t\t}\n\t\tcatch<TResult = never>(reject?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult> {\n\t\t\treturn this.then(undefined, reject);\n\t\t}\n\t\tfinally(onfinally?: (() => void) | undefined | null): Promise<T> {\n\t\t\treturn promise.finally(onfinally);\n\t\t}\n\t};\n}\n\nexport function asPromise<T>(callback: () => T | Thenable<T>): Promise<T> {\n\treturn new Promise<T>((resolve, reject) => {\n\t\tconst item = callback();\n\t\tif (isThenable<T>(item)) {\n\t\t\titem.then(resolve, reject);\n\t\t} else {\n\t\t\tresolve(item);\n\t\t}\n\t});\n}\n\nexport interface ITask<T> {\n\t(): T;\n}\n\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n\n\tprivate activePromise: Promise<any> | null;\n\tprivate queuedPromise: Promise<any> | null;\n\tprivate queuedPromiseFactory: ITask<Promise<any>> | null;\n\n\tconstructor() {\n\t\tthis.activePromise = null;\n\t\tthis.queuedPromise = null;\n\t\tthis.queuedPromiseFactory = null;\n\t}\n\n\tqueue<T>(promiseFactory: ITask<Promise<T>>): Promise<T> {\n\t\tif (this.activePromise) {\n\t\t\tthis.queuedPromiseFactory = promiseFactory;\n\n\t\t\tif (!this.queuedPromise) {\n\t\t\t\tconst onComplete = () => {\n\t\t\t\t\tthis.queuedPromise = null;\n\n\t\t\t\t\tconst result = this.queue(this.queuedPromiseFactory!);\n\t\t\t\t\tthis.queuedPromiseFactory = null;\n\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\tthis.queuedPromise = new Promise(c => {\n\t\t\t\t\tthis.activePromise!.then(onComplete, onComplete).then(c);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Promise((c, e) => {\n\t\t\t\tthis.queuedPromise!.then(c, e);\n\t\t\t});\n\t\t}\n\n\t\tthis.activePromise = promiseFactory();\n\n\t\treturn new Promise((c, e) => {\n\t\t\tthis.activePromise!.then((result: any) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\tc(result);\n\t\t\t}, (err: any) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\te(err);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport class Sequencer {\n\n\tprivate current: Promise<any> = Promise.resolve(null);\n\n\tqueue<T>(promiseTask: ITask<Promise<T>>): Promise<T> {\n\t\treturn this.current = this.current.then(() => promiseTask());\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer<T> implements IDisposable {\n\n\tprivate timeout: any;\n\tprivate completionPromise: Promise<any> | null;\n\tprivate doResolve: ((value?: any | Promise<any>) => void) | null;\n\tprivate doReject: (err: any) => void;\n\tprivate task: ITask<T | Promise<T>> | null;\n\n\tconstructor(public defaultDelay: number) {\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.doResolve = null;\n\t\tthis.task = null;\n\t}\n\n\ttrigger(task: ITask<T | Promise<T>>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tthis.cancelTimeout();\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise((c, e) => {\n\t\t\t\tthis.doResolve = c;\n\t\t\t\tthis.doReject = e;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.doResolve = null;\n\t\t\t\tconst task = this.task!;\n\t\t\t\tthis.task = null;\n\n\t\t\t\treturn task();\n\t\t\t});\n\t\t}\n\n\t\tthis.timeout = setTimeout(() => {\n\t\t\tthis.timeout = null;\n\t\t\tthis.doResolve!(null);\n\t\t}, delay);\n\n\t\treturn this.completionPromise;\n\t}\n\n\tisTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tcancel(): void {\n\t\tthis.cancelTimeout();\n\n\t\tif (this.completionPromise) {\n\t\t\tthis.doReject(errors.canceled());\n\t\t\tthis.completionPromise = null;\n\t\t}\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.cancelTimeout();\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer<T> {\n\n\tprivate delayer: Delayer<Promise<T>>;\n\tprivate throttler: Throttler;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.delayer = new Delayer(defaultDelay);\n\t\tthis.throttler = new Throttler();\n\t}\n\n\ttrigger(promiseFactory: ITask<Promise<T>>, delay?: number): Promise<T> {\n\t\treturn this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay) as any as Promise<T>;\n\t}\n\n\tisTriggered(): boolean {\n\t\treturn this.delayer.isTriggered();\n\t}\n\n\tcancel(): void {\n\t\tthis.delayer.cancel();\n\t}\n\n\tdispose(): void {\n\t\tthis.delayer.dispose();\n\t}\n}\n\n/**\n * A barrier that is initially closed and then becomes opened permanently.\n */\nexport class Barrier {\n\n\tprivate _isOpen: boolean;\n\tprivate _promise: Promise<boolean>;\n\tprivate _completePromise: (v: boolean) => void;\n\n\tconstructor() {\n\t\tthis._isOpen = false;\n\t\tthis._promise = new Promise<boolean>((c, e) => {\n\t\t\tthis._completePromise = c;\n\t\t});\n\t}\n\n\tisOpen(): boolean {\n\t\treturn this._isOpen;\n\t}\n\n\topen(): void {\n\t\tthis._isOpen = true;\n\t\tthis._completePromise(true);\n\t}\n\n\twait(): Promise<boolean> {\n\t\treturn this._promise;\n\t}\n}\n\nexport function timeout(millis: number): CancelablePromise<void>;\nexport function timeout(millis: number, token: CancellationToken): Promise<void>;\nexport function timeout(millis: number, token?: CancellationToken): CancelablePromise<void> | Promise<void> {\n\tif (!token) {\n\t\treturn createCancelablePromise(token => timeout(millis, token));\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst handle = setTimeout(resolve, millis);\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tclearTimeout(handle);\n\t\t\treject(errors.canceled());\n\t\t});\n\t});\n}\n\nexport function disposableTimeout(handler: () => void, timeout = 0): IDisposable {\n\tconst timer = setTimeout(handler, timeout);\n\treturn toDisposable(() => clearTimeout(timer));\n}\n\nexport function ignoreErrors<T>(promise: Promise<T>): Promise<T | undefined> {\n\treturn promise.then(undefined, _ => undefined);\n}\n\n/**\n * Runs the provided list of promise factories in sequential order. The returned\n * promise will complete to an array of results from each promise.\n */\n\nexport function sequence<T>(promiseFactories: ITask<Promise<T>>[]): Promise<T[]> {\n\tconst results: T[] = [];\n\tlet index = 0;\n\tconst len = promiseFactories.length;\n\n\tfunction next(): Promise<T> | null {\n\t\treturn index < len ? promiseFactories[index++]() : null;\n\t}\n\n\tfunction thenHandler(result: any): Promise<any> {\n\t\tif (result !== undefined && result !== null) {\n\t\t\tresults.push(result);\n\t\t}\n\n\t\tconst n = next();\n\t\tif (n) {\n\t\t\treturn n.then(thenHandler);\n\t\t}\n\n\t\treturn Promise.resolve(results);\n\t}\n\n\treturn Promise.resolve(null).then(thenHandler);\n}\n\nexport function first<T>(promiseFactories: ITask<Promise<T>>[], shouldStop: (t: T) => boolean = t => !!t, defaultValue: T | null = null): Promise<T | null> {\n\tlet index = 0;\n\tconst len = promiseFactories.length;\n\n\tconst loop: () => Promise<T | null> = () => {\n\t\tif (index >= len) {\n\t\t\treturn Promise.resolve(defaultValue);\n\t\t}\n\n\t\tconst factory = promiseFactories[index++];\n\t\tconst promise = Promise.resolve(factory());\n\n\t\treturn promise.then(result => {\n\t\t\tif (shouldStop(result)) {\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t}\n\n\t\t\treturn loop();\n\t\t});\n\t};\n\n\treturn loop();\n}\n\ninterface ILimitedTaskFactory<T> {\n\tfactory: ITask<Promise<T>>;\n\tc: (value?: T | Promise<T>) => void;\n\te: (error?: any) => void;\n}\n\n/**\n * A helper to queue N promises and run them all with a max degree of parallelism. The helper\n * ensures that at any time no more than M promises are running at the same time.\n */\nexport class Limiter<T> {\n\n\tprivate _size = 0;\n\tprivate runningPromises: number;\n\tprivate maxDegreeOfParalellism: number;\n\tprivate outstandingPromises: ILimitedTaskFactory<T>[];\n\tprivate readonly _onFinished: Emitter<void>;\n\n\tconstructor(maxDegreeOfParalellism: number) {\n\t\tthis.maxDegreeOfParalellism = maxDegreeOfParalellism;\n\t\tthis.outstandingPromises = [];\n\t\tthis.runningPromises = 0;\n\t\tthis._onFinished = new Emitter<void>();\n\t}\n\n\tpublic get onFinished(): Event<void> {\n\t\treturn this._onFinished.event;\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._size;\n\t\t// return this.runningPromises + this.outstandingPromises.length;\n\t}\n\n\tqueue(factory: ITask<Promise<T>>): Promise<T> {\n\t\tthis._size++;\n\n\t\treturn new Promise<T>((c, e) => {\n\t\t\tthis.outstandingPromises.push({ factory, c, e });\n\t\t\tthis.consume();\n\t\t});\n\t}\n\n\tprivate consume(): void {\n\t\twhile (this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism) {\n\t\t\tconst iLimitedTask = this.outstandingPromises.shift()!;\n\t\t\tthis.runningPromises++;\n\n\t\t\tconst promise = iLimitedTask.factory();\n\t\t\tpromise.then(iLimitedTask.c, iLimitedTask.e);\n\t\t\tpromise.then(() => this.consumed(), () => this.consumed());\n\t\t}\n\t}\n\n\tprivate consumed(): void {\n\t\tthis._size--;\n\t\tthis.runningPromises--;\n\n\t\tif (this.outstandingPromises.length > 0) {\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tthis._onFinished.fire();\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._onFinished.dispose();\n\t}\n}\n\n/**\n * A queue is handles one promise at a time and guarantees that at any time only one promise is executing.\n */\nexport class Queue<T> extends Limiter<T> {\n\n\tconstructor() {\n\t\tsuper(1);\n\t}\n}\n\n/**\n * A helper to organize queues per resource. The ResourceQueue makes sure to manage queues per resource\n * by disposing them once the queue is empty.\n */\nexport class ResourceQueue {\n\tprivate queues: { [path: string]: Queue<void> };\n\n\tconstructor() {\n\t\tthis.queues = Object.create(null);\n\t}\n\n\tpublic queueFor(resource: URI): Queue<void> {\n\t\tconst key = resource.toString();\n\t\tif (!this.queues[key]) {\n\t\t\tconst queue = new Queue<void>();\n\t\t\tqueue.onFinished(() => {\n\t\t\t\tqueue.dispose();\n\t\t\t\tdelete this.queues[key];\n\t\t\t});\n\n\t\t\tthis.queues[key] = queue;\n\t\t}\n\n\t\treturn this.queues[key];\n\t}\n}\n\nexport class TimeoutTimer extends Disposable {\n\tprivate _token: any;\n\n\tconstructor();\n\tconstructor(runner: () => void, timeout: number);\n\tconstructor(runner?: () => void, timeout?: number) {\n\t\tsuper();\n\t\tthis._token = -1;\n\n\t\tif (typeof runner === 'function' && typeof timeout === 'number') {\n\t\t\tthis.setIfNotSet(runner, timeout);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tclearTimeout(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, timeout: number): void {\n\t\tthis.cancel();\n\t\tthis._token = setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n\n\tsetIfNotSet(runner: () => void, timeout: number): void {\n\t\tif (this._token !== -1) {\n\t\t\t// timer is already set\n\t\t\treturn;\n\t\t}\n\t\tthis._token = setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n}\n\nexport class IntervalTimer extends Disposable {\n\n\tprivate _token: any;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._token = -1;\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tclearInterval(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, interval: number): void {\n\t\tthis.cancel();\n\t\tthis._token = setInterval(() => {\n\t\t\trunner();\n\t\t}, interval);\n\t}\n}\n\nexport class RunOnceScheduler {\n\n\tprotected runner: ((...args: any[]) => void) | null;\n\n\tprivate timeoutToken: any;\n\tprivate timeout: number;\n\tprivate timeoutHandler: () => void;\n\n\tconstructor(runner: (...args: any[]) => void, timeout: number) {\n\t\tthis.timeoutToken = -1;\n\t\tthis.runner = runner;\n\t\tthis.timeout = timeout;\n\t\tthis.timeoutHandler = this.onTimeout.bind(this);\n\t}\n\n\t/**\n\t * Dispose RunOnceScheduler\n\t */\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tthis.runner = null;\n\t}\n\n\t/**\n\t * Cancel current scheduled runner (if any).\n\t */\n\tcancel(): void {\n\t\tif (this.isScheduled()) {\n\t\t\tclearTimeout(this.timeoutToken);\n\t\t\tthis.timeoutToken = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel previous runner (if any) & schedule a new runner.\n\t */\n\tschedule(delay = this.timeout): void {\n\t\tthis.cancel();\n\t\tthis.timeoutToken = setTimeout(this.timeoutHandler, delay);\n\t}\n\n\t/**\n\t * Returns true if scheduled.\n\t */\n\tisScheduled(): boolean {\n\t\treturn this.timeoutToken !== -1;\n\t}\n\n\tprivate onTimeout() {\n\t\tthis.timeoutToken = -1;\n\t\tif (this.runner) {\n\t\t\tthis.doRun();\n\t\t}\n\t}\n\n\tprotected doRun(): void {\n\t\tif (this.runner) {\n\t\t\tthis.runner();\n\t\t}\n\t}\n}\n\nexport class RunOnceWorker<T> extends RunOnceScheduler {\n\tprivate units: T[] = [];\n\n\tconstructor(runner: (units: T[]) => void, timeout: number) {\n\t\tsuper(runner, timeout);\n\t}\n\n\twork(unit: T): void {\n\t\tthis.units.push(unit);\n\n\t\tif (!this.isScheduled()) {\n\t\t\tthis.schedule();\n\t\t}\n\t}\n\n\tprotected doRun(): void {\n\t\tconst units = this.units;\n\t\tthis.units = [];\n\n\t\tif (this.runner) {\n\t\t\tthis.runner(units);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.units = [];\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport function nfcall(fn: Function, ...args: any[]): Promise<any>;\nexport function nfcall<T>(fn: Function, ...args: any[]): Promise<T>;\nexport function nfcall(fn: Function, ...args: any[]): any {\n\treturn new Promise((c, e) => fn(...args, (err: any, result: any) => err ? e(err) : c(result)));\n}\n\nexport function ninvoke(thisArg: any, fn: Function, ...args: any[]): Promise<any>;\nexport function ninvoke<T>(thisArg: any, fn: Function, ...args: any[]): Promise<T>;\nexport function ninvoke(thisArg: any, fn: Function, ...args: any[]): any {\n\treturn new Promise((resolve, reject) => fn.call(thisArg, ...args, (err: any, result: any) => err ? reject(err) : resolve(result)));\n}\n\n\n//#region -- run on idle tricks ------------\n\nexport interface IdleDeadline {\n\treadonly didTimeout: boolean;\n\ttimeRemaining(): DOMHighResTimeStamp;\n}\n/**\n * Execute the callback the next time the browser is idle\n */\nexport let runWhenIdle: (callback: (idle: IdleDeadline) => void, timeout?: number) => IDisposable;\n\ndeclare function requestIdleCallback(callback: (args: IdleDeadline) => void, options?: { timeout: number }): number;\ndeclare function cancelIdleCallback(handle: number): void;\n\n(function () {\n\tif (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n\t\tconst dummyIdle: IdleDeadline = Object.freeze({\n\t\t\tdidTimeout: true,\n\t\t\ttimeRemaining() { return 15; }\n\t\t});\n\t\trunWhenIdle = (runner) => {\n\t\t\tconst handle = setTimeout(() => runner(dummyIdle));\n\t\t\tlet disposed = false;\n\t\t\treturn {\n\t\t\t\tdispose() {\n\t\t\t\t\tif (disposed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdisposed = true;\n\t\t\t\t\tclearTimeout(handle);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t} else {\n\t\trunWhenIdle = (runner, timeout?) => {\n\t\t\tconst handle: number = requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);\n\t\t\tlet disposed = false;\n\t\t\treturn {\n\t\t\t\tdispose() {\n\t\t\t\t\tif (disposed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdisposed = true;\n\t\t\t\t\tcancelIdleCallback(handle);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n})();\n\n/**\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\n * here: https://philipwalton.com/articles/idle-until-urgent/\n */\nexport class IdleValue<T> {\n\n\tprivate readonly _executor: () => void;\n\tprivate readonly _handle: IDisposable;\n\n\tprivate _didRun: boolean;\n\tprivate _value: T;\n\tprivate _error: any;\n\n\tconstructor(executor: () => T) {\n\t\tthis._executor = () => {\n\t\t\ttry {\n\t\t\t\tthis._value = executor();\n\t\t\t} catch (err) {\n\t\t\t\tthis._error = err;\n\t\t\t} finally {\n\t\t\t\tthis._didRun = true;\n\t\t\t}\n\t\t};\n\t\tthis._handle = runWhenIdle(() => this._executor());\n\t}\n\n\tdispose(): void {\n\t\tthis._handle.dispose();\n\t}\n\n\tgetValue(): T {\n\t\tif (!this._didRun) {\n\t\t\tthis._handle.dispose();\n\t\t\tthis._executor();\n\t\t}\n\t\tif (this._error) {\n\t\t\tthrow this._error;\n\t\t}\n\t\treturn this._value;\n\t}\n}\n\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport namespace Schemas {\n\n\t/**\n\t * A schema that is used for models that exist in memory\n\t * only and that have no correspondence on a server or such.\n\t */\n\texport const inMemory: string = 'inmemory';\n\n\t/**\n\t * A schema that is used for setting files\n\t */\n\texport const vscode: string = 'vscode';\n\n\t/**\n\t * A schema that is used for internal private files\n\t */\n\texport const internal: string = 'private';\n\n\t/**\n\t * A walk-through document.\n\t */\n\texport const walkThrough: string = 'walkThrough';\n\n\t/**\n\t * An embedded code snippet.\n\t */\n\texport const walkThroughSnippet: string = 'walkThroughSnippet';\n\n\texport const http: string = 'http';\n\n\texport const https: string = 'https';\n\n\texport const file: string = 'file';\n\n\texport const mailto: string = 'mailto';\n\n\texport const untitled: string = 'untitled';\n\n\texport const data: string = 'data';\n\n\texport const command: string = 'command';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWindows, isMacintosh, setImmediate } from 'vs/base/common/platform';\n\ninterface IProcess {\n\tplatform: string;\n\tenv: object;\n\n\tcwd(): string;\n\tnextTick(callback: (...args: any[]) => void): number;\n}\n\ndeclare const process: IProcess;\nconst safeProcess: IProcess = (typeof process === 'undefined') ? {\n\tcwd(): string { return '/'; },\n\tenv: Object.create(null),\n\tget platform(): string { return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux'; },\n\tnextTick(callback: (...args: any[]) => void): number { return setImmediate(callback); }\n} : process;\n\nexport const cwd = safeProcess.cwd;\nexport const env = safeProcess.env;\nexport const platform = safeProcess.platform;\nexport const nextTick = safeProcess.nextTick;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/tree/43dd49c9782848c25e5b03448c8a0f923f13c158\n\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport * as process from 'vs/base/common/process';\n\nconst CHAR_UPPERCASE_A = 65;/* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\n\nclass ErrorInvalidArgType extends Error {\n\tcode: 'ERR_INVALID_ARG_TYPE';\n\tconstructor(name: string, expected: string, actual: string) {\n\t\t// determiner: 'must be' or 'must not be'\n\t\tlet determiner;\n\t\tif (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n\t\t\tdeterminer = 'must not be';\n\t\t\texpected = expected.replace(/^not /, '');\n\t\t} else {\n\t\t\tdeterminer = 'must be';\n\t\t}\n\n\t\tlet msg;\n\t\tconst type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n\t\tmsg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n\n\t\tmsg += `. Received type ${typeof actual}`;\n\t\tsuper(msg);\n\t}\n}\n\nfunction validateString(value: string, name) {\n\tif (typeof value !== 'string') {\n\t\tthrow new ErrorInvalidArgType(name, 'string', value);\n\t}\n}\n\nfunction isPathSeparator(code) {\n\treturn code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\n\nfunction isPosixPathSeparator(code) {\n\treturn code === CHAR_FORWARD_SLASH;\n}\n\nfunction isWindowsDeviceRoot(code) {\n\treturn code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z ||\n\t\tcode >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n\tlet res = '';\n\tlet lastSegmentLength = 0;\n\tlet lastSlash = -1;\n\tlet dots = 0;\n\tlet code;\n\tfor (let i = 0; i <= path.length; ++i) {\n\t\tif (i < path.length) {\n\t\t\tcode = path.charCodeAt(i);\n\t\t}\n\t\telse if (isPathSeparator(code)) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tcode = CHAR_FORWARD_SLASH;\n\t\t}\n\n\t\tif (isPathSeparator(code)) {\n\t\t\tif (lastSlash === i - 1 || dots === 1) {\n\t\t\t\t// NOOP\n\t\t\t} else if (lastSlash !== i - 1 && dots === 2) {\n\t\t\t\tif (res.length < 2 || lastSegmentLength !== 2 ||\n\t\t\t\t\tres.charCodeAt(res.length - 1) !== CHAR_DOT ||\n\t\t\t\t\tres.charCodeAt(res.length - 2) !== CHAR_DOT) {\n\t\t\t\t\tif (res.length > 2) {\n\t\t\t\t\t\tconst lastSlashIndex = res.lastIndexOf(separator);\n\t\t\t\t\t\tif (lastSlashIndex === -1) {\n\t\t\t\t\t\t\tres = '';\n\t\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres = res.slice(0, lastSlashIndex);\n\t\t\t\t\t\t\tlastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (res.length === 2 || res.length === 1) {\n\t\t\t\t\t\tres = '';\n\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allowAboveRoot) {\n\t\t\t\t\tif (res.length > 0) {\n\t\t\t\t\t\tres += `${separator}..`;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tres = '..';\n\t\t\t\t\t}\n\t\t\t\t\tlastSegmentLength = 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (res.length > 0) {\n\t\t\t\t\tres += separator + path.slice(lastSlash + 1, i);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres = path.slice(lastSlash + 1, i);\n\t\t\t\t}\n\t\t\t\tlastSegmentLength = i - lastSlash - 1;\n\t\t\t}\n\t\t\tlastSlash = i;\n\t\t\tdots = 0;\n\t\t} else if (code === CHAR_DOT && dots !== -1) {\n\t\t\t++dots;\n\t\t} else {\n\t\t\tdots = -1;\n\t\t}\n\t}\n\treturn res;\n}\n\nfunction _format(sep, pathObject) {\n\tconst dir = pathObject.dir || pathObject.root;\n\tconst base = pathObject.base ||\n\t\t((pathObject.name || '') + (pathObject.ext || ''));\n\tif (!dir) {\n\t\treturn base;\n\t}\n\tif (dir === pathObject.root) {\n\t\treturn dir + base;\n\t}\n\treturn dir + sep + base;\n}\n\ninterface ParsedPath {\n\troot: string;\n\tdir: string;\n\tbase: string;\n\text: string;\n\tname: string;\n}\n\ninterface IPath {\n\tnormalize(path: string): string;\n\tisAbsolute(path: string): boolean;\n\tjoin(...paths: string[]): string;\n\tresolve(...pathSegments: string[]): string;\n\trelative(from: string, to: string): string;\n\tdirname(path: string): string;\n\tbasename(path: string, ext?: string): string;\n\textname(path: string): string;\n\tformat(pathObject): string;\n\tparse(path: string): ParsedPath;\n\ttoNamespacedPath(path: string): string;\n\tsep: '\\\\' | '/';\n\tdelimiter: string;\n\twin32: IPath | null;\n\tposix: IPath | null;\n}\n\nexport const win32: IPath = {\n\t// path.resolve([from ...], to)\n\tresolve(...pathSegments: string[]): string {\n\t\tlet resolvedDevice = '';\n\t\tlet resolvedTail = '';\n\t\tlet resolvedAbsolute = false;\n\n\t\tfor (let i = pathSegments.length - 1; i >= -1; i--) {\n\t\t\tlet path;\n\t\t\tif (i >= 0) {\n\t\t\t\tpath = pathSegments[i];\n\t\t\t} else if (!resolvedDevice) {\n\t\t\t\tpath = process.cwd();\n\t\t\t} else {\n\t\t\t\t// Windows has the concept of drive-specific current working\n\t\t\t\t// directories. If we've resolved a drive letter but not yet an\n\t\t\t\t// absolute path, get cwd for that drive, or the process cwd if\n\t\t\t\t// the drive cwd is not available. We're sure the device is not\n\t\t\t\t// a UNC path at this points, because UNC paths are always absolute.\n\t\t\t\tpath = process.env['=' + resolvedDevice] || process.cwd();\n\n\t\t\t\t// Verify that a cwd was found and that it actually points\n\t\t\t\t// to our drive. If not, default to the drive's root.\n\t\t\t\tif (path === undefined ||\n\t\t\t\t\tpath.slice(0, 3).toLowerCase() !==\n\t\t\t\t\tresolvedDevice.toLowerCase() + '\\\\') {\n\t\t\t\t\tpath = resolvedDevice + '\\\\';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvalidateString(path, 'path');\n\n\t\t\t// Skip empty entries\n\t\t\tif (path.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst len = path.length;\n\t\t\tlet rootEnd = 0;\n\t\t\tlet device = '';\n\t\t\tlet isAbsolute = false;\n\t\t\tconst code = path.charCodeAt(0);\n\n\t\t\t// Try to match a root\n\t\t\tif (len > 1) {\n\t\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t\t// Possible UNC root\n\n\t\t\t\t\t// If we started with a separator, we know we at least have an\n\t\t\t\t\t// absolute path of some kind (UNC or otherwise)\n\t\t\t\t\tisAbsolute = true;\n\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\t\tlet j = 2;\n\t\t\t\t\t\tlet last = j;\n\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\tconst firstPart = path.slice(last, j);\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t\t// We matched a UNC root only\n\n\t\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last);\n\t\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n\t\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEnd = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t\t// Possible device root\n\n\t\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\t\tdevice = path.slice(0, 2);\n\t\t\t\t\t\trootEnd = 2;\n\t\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\t\t// Treat separator following drive name as an absolute path\n\t\t\t\t\t\t\t\t// indicator\n\t\t\t\t\t\t\t\tisAbsolute = true;\n\t\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isPathSeparator(code)) {\n\t\t\t\t// `path` contains just a path separator\n\t\t\t\trootEnd = 1;\n\t\t\t\tisAbsolute = true;\n\t\t\t}\n\n\t\t\tif (device.length > 0 &&\n\t\t\t\tresolvedDevice.length > 0 &&\n\t\t\t\tdevice.toLowerCase() !== resolvedDevice.toLowerCase()) {\n\t\t\t\t// This path points to another device so it is not applicable\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (resolvedDevice.length === 0 && device.length > 0) {\n\t\t\t\tresolvedDevice = device;\n\t\t\t}\n\t\t\tif (!resolvedAbsolute) {\n\t\t\t\tresolvedTail = path.slice(rootEnd) + '\\\\' + resolvedTail;\n\t\t\t\tresolvedAbsolute = isAbsolute;\n\t\t\t}\n\n\t\t\tif (resolvedDevice.length > 0 && resolvedAbsolute) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// At this point the path should be resolved to a full absolute path,\n\t\t// but handle relative paths to be safe (might happen when process.cwd()\n\t\t// fails)\n\n\t\t// Normalize the tail path\n\t\tresolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\n\t\t\tisPathSeparator);\n\n\t\treturn (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n\t\t\t'.';\n\t},\n\n\tnormalize(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet rootEnd = 0;\n\t\tlet device;\n\t\tlet isAbsolute = false;\n\t\tconst code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\t// If we started with a separator, we know we at least have an absolute\n\t\t\t\t// path of some kind (UNC or otherwise)\n\t\t\t\tisAbsolute = true;\n\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\tconst firstPart = path.slice(last, j);\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\t\t\t\t\t\t\t\t// Return the normalized version of the UNC root since there\n\t\t\t\t\t\t\t\t// is nothing left to process\n\n\t\t\t\t\t\t\t\treturn '\\\\\\\\' + firstPart + '\\\\' + path.slice(last) + '\\\\';\n\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trootEnd = 1;\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\tdevice = path.slice(0, 2);\n\t\t\t\t\trootEnd = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\t// Treat separator following drive name as an absolute path\n\t\t\t\t\t\t\t// indicator\n\t\t\t\t\t\t\tisAbsolute = true;\n\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid unnecessary\n\t\t\t// work\n\t\t\treturn '\\\\';\n\t\t}\n\n\t\tlet tail;\n\t\tif (rootEnd < len) {\n\t\t\ttail = normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\',\n\t\t\t\tisPathSeparator);\n\t\t} else {\n\t\t\ttail = '';\n\t\t}\n\t\tif (tail.length === 0 && !isAbsolute) {\n\t\t\ttail = '.';\n\t\t}\n\t\tif (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n\t\t\ttail += '\\\\';\n\t\t}\n\t\tif (device === undefined) {\n\t\t\tif (isAbsolute) {\n\t\t\t\tif (tail.length > 0) {\n\t\t\t\t\treturn '\\\\' + tail;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn '\\\\';\n\t\t\t\t}\n\t\t\t} else if (tail.length > 0) {\n\t\t\t\treturn tail;\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else if (isAbsolute) {\n\t\t\tif (tail.length > 0) {\n\t\t\t\treturn device + '\\\\' + tail;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn device + '\\\\';\n\t\t\t}\n\t\t} else if (tail.length > 0) {\n\t\t\treturn device + tail;\n\t\t} else {\n\t\t\treturn device;\n\t\t}\n\t},\n\n\tisAbsolute(path: string): boolean {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst code = path.charCodeAt(0);\n\t\tif (isPathSeparator(code)) {\n\t\t\treturn true;\n\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t// Possible device root\n\n\t\t\tif (len > 2 && path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\tjoin(...paths: string[]): string {\n\t\tif (paths.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\n\t\tlet joined;\n\t\tlet firstPart;\n\t\tfor (let i = 0; i < paths.length; ++i) {\n\t\t\tconst arg = paths[i];\n\t\t\tvalidateString(arg, 'path');\n\t\t\tif (arg.length > 0) {\n\t\t\t\tif (joined === undefined) {\n\t\t\t\t\tjoined = firstPart = arg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tjoined += '\\\\' + arg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (joined === undefined) {\n\t\t\treturn '.';\n\t\t}\n\n\t\t// Make sure that the joined path doesn't start with two slashes, because\n\t\t// normalize() will mistake it for an UNC path then.\n\t\t//\n\t\t// This step is skipped when it is very clear that the user actually\n\t\t// intended to point at an UNC path. This is assumed when the first\n\t\t// non-empty string arguments starts with exactly two slashes followed by\n\t\t// at least one more non-slash character.\n\t\t//\n\t\t// Note that for normalize() to treat a path as an UNC path it needs to\n\t\t// have at least 2 components, so we don't filter for that here.\n\t\t// This means that the user can use join to construct UNC paths from\n\t\t// a server name and a share name; for example:\n\t\t//   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n\t\tlet needsReplace = true;\n\t\tlet slashCount = 0;\n\t\tif (isPathSeparator(firstPart.charCodeAt(0))) {\n\t\t\t++slashCount;\n\t\t\tconst firstLen = firstPart.length;\n\t\t\tif (firstLen > 1) {\n\t\t\t\tif (isPathSeparator(firstPart.charCodeAt(1))) {\n\t\t\t\t\t++slashCount;\n\t\t\t\t\tif (firstLen > 2) {\n\t\t\t\t\t\tif (isPathSeparator(firstPart.charCodeAt(2))) {\n\t\t\t\t\t\t\t++slashCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// We matched a UNC path in the first part\n\t\t\t\t\t\t\tneedsReplace = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (needsReplace) {\n\t\t\t// Find any more consecutive slashes we need to replace\n\t\t\tfor (; slashCount < joined.length; ++slashCount) {\n\t\t\t\tif (!isPathSeparator(joined.charCodeAt(slashCount))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Replace the slashes if needed\n\t\t\tif (slashCount >= 2) {\n\t\t\t\tjoined = '\\\\' + joined.slice(slashCount);\n\t\t\t}\n\t\t}\n\n\t\treturn win32.normalize(joined);\n\t},\n\n\n\t// It will solve the relative path from `from` to `to`, for instance:\n\t//  from = 'C:\\\\orandea\\\\test\\\\aaa'\n\t//  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n\t// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n\trelative(from: string, to: string): string {\n\t\tvalidateString(from, 'from');\n\t\tvalidateString(to, 'to');\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst fromOrig = win32.resolve(from);\n\t\tconst toOrig = win32.resolve(to);\n\n\t\tif (fromOrig === toOrig) {\n\t\t\treturn '';\n\t\t}\n\n\t\tfrom = fromOrig.toLowerCase();\n\t\tto = toOrig.toLowerCase();\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Trim any leading backslashes\n\t\tlet fromStart = 0;\n\t\tfor (; fromStart < from.length; ++fromStart) {\n\t\t\tif (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Trim trailing backslashes (applicable to UNC paths only)\n\t\tlet fromEnd = from.length;\n\t\tfor (; fromEnd - 1 > fromStart; --fromEnd) {\n\t\t\tif (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst fromLen = (fromEnd - fromStart);\n\n\t\t// Trim any leading backslashes\n\t\tlet toStart = 0;\n\t\tfor (; toStart < to.length; ++toStart) {\n\t\t\tif (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Trim trailing backslashes (applicable to UNC paths only)\n\t\tlet toEnd = to.length;\n\t\tfor (; toEnd - 1 > toStart; --toEnd) {\n\t\t\tif (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst toLen = (toEnd - toStart);\n\n\t\t// Compare paths to find the longest common path from root\n\t\tconst length = (fromLen < toLen ? fromLen : toLen);\n\t\tlet lastCommonSep = -1;\n\t\tlet i = 0;\n\t\tfor (; i <= length; ++i) {\n\t\t\tif (i === length) {\n\t\t\t\tif (toLen > length) {\n\t\t\t\t\tif (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `from` is the exact base path for `to`.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n\t\t\t\t\t\treturn toOrig.slice(toStart + i + 1);\n\t\t\t\t\t} else if (i === 2) {\n\t\t\t\t\t\t// We get here if `from` is the device root.\n\t\t\t\t\t\t// For example: from='C:\\\\'; to='C:\\\\foo'\n\t\t\t\t\t\treturn toOrig.slice(toStart + i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fromLen > length) {\n\t\t\t\t\tif (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `to` is the exact base path for `from`.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n\t\t\t\t\t\tlastCommonSep = i;\n\t\t\t\t\t} else if (i === 2) {\n\t\t\t\t\t\t// We get here if `to` is the device root.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n\t\t\t\t\t\tlastCommonSep = 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst fromCode = from.charCodeAt(fromStart + i);\n\t\t\tconst toCode = to.charCodeAt(toStart + i);\n\t\t\tif (fromCode !== toCode) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (fromCode === CHAR_BACKWARD_SLASH) {\n\t\t\t\tlastCommonSep = i;\n\t\t\t}\n\t\t}\n\n\t\t// We found a mismatch before the first common path separator was seen, so\n\t\t// return the original `to`.\n\t\tif (i !== length && lastCommonSep === -1) {\n\t\t\treturn toOrig;\n\t\t}\n\n\t\tlet out = '';\n\t\tif (lastCommonSep === -1) {\n\t\t\tlastCommonSep = 0;\n\t\t}\n\t\t// Generate the relative path based on the path difference between `to` and\n\t\t// `from`\n\t\tfor (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n\t\t\tif (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\tif (out.length === 0) {\n\t\t\t\t\tout += '..';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout += '\\\\..';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lastly, append the rest of the destination (`to`) path that comes after\n\t\t// the common path parts\n\t\tif (out.length > 0) {\n\t\t\treturn out + toOrig.slice(toStart + lastCommonSep, toEnd);\n\t\t}\n\t\telse {\n\t\t\ttoStart += lastCommonSep;\n\t\t\tif (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t++toStart;\n\t\t\t}\n\t\t\treturn toOrig.slice(toStart, toEnd);\n\t\t}\n\t},\n\n\ttoNamespacedPath(path: string): string {\n\t\t// Note: this will *probably* throw somewhere.\n\t\tif (typeof path !== 'string') {\n\t\t\treturn path;\n\t\t}\n\n\t\tif (path.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst resolvedPath = win32.resolve(path);\n\n\t\tif (resolvedPath.length >= 3) {\n\t\t\tif (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\tif (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\tconst code = resolvedPath.charCodeAt(2);\n\t\t\t\t\tif (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n\t\t\t\t\t\t// Matched non-long UNC root, convert the path to a long UNC path\n\t\t\t\t\t\treturn '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.slice(2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (resolvedPath.charCodeAt(1) === CHAR_COLON &&\n\t\t\t\t\tresolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t// Matched device root, convert the path to a long UNC path\n\t\t\t\t\treturn '\\\\\\\\?\\\\' + resolvedPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn path;\n\t},\n\n\tdirname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet rootEnd = -1;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet offset = 0;\n\t\tconst code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\trootEnd = offset = 1;\n\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\t\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\t// Offset by 1 to include the separator after the UNC root to\n\t\t\t\t\t\t\t\t// treat it as a \"normal root\" on top of a (UNC) root\n\t\t\t\t\t\t\t\trootEnd = offset = j + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\trootEnd = offset = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\trootEnd = offset = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid\n\t\t\t// unnecessary work\n\t\t\treturn path;\n\t\t}\n\n\t\tfor (let i = len - 1; i >= offset; --i) {\n\t\t\tif (isPathSeparator(path.charCodeAt(i))) {\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We saw the first non-path separator\n\t\t\t\tmatchedSlash = false;\n\t\t\t}\n\t\t}\n\n\t\tif (end === -1) {\n\t\t\tif (rootEnd === -1) {\n\t\t\t\treturn '.';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tend = rootEnd;\n\t\t\t}\n\t\t}\n\t\treturn path.slice(0, end);\n\t},\n\n\tbasename(path: string, ext?: string): string {\n\t\tif (ext !== undefined) {\n\t\t\tvalidateString(ext, 'ext');\n\t\t}\n\t\tvalidateString(path, 'path');\n\t\tlet start = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i;\n\n\t\t// Check for a drive letter prefix so as not to mistake the following\n\t\t// path separator as an extra separator at the end of the path that can be\n\t\t// disregarded\n\t\tif (path.length >= 2) {\n\t\t\tconst drive = path.charCodeAt(0);\n\t\t\tif (isWindowsDeviceRoot(drive)) {\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\tstart = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n\t\t\tif (ext.length === path.length && ext === path) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet extIdx = ext.length - 1;\n\t\t\tlet firstNonSlashEnd = -1;\n\t\t\tfor (i = path.length - 1; i >= start; --i) {\n\t\t\t\tconst code = path.charCodeAt(i);\n\t\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (firstNonSlashEnd === -1) {\n\t\t\t\t\t\t// We saw the first non-path separator, remember this index in case\n\t\t\t\t\t\t// we need it if the extension ends up not matching\n\t\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\t\tfirstNonSlashEnd = i + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (extIdx >= 0) {\n\t\t\t\t\t\t// Try to match the explicit extension\n\t\t\t\t\t\tif (code === ext.charCodeAt(extIdx)) {\n\t\t\t\t\t\t\tif (--extIdx === -1) {\n\t\t\t\t\t\t\t\t// We matched the extension, so mark this as the end of our path\n\t\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Extension does not match, so our result is the entire path\n\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\textIdx = -1;\n\t\t\t\t\t\t\tend = firstNonSlashEnd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === end) {\n\t\t\t\tend = firstNonSlashEnd;\n\t\t\t}\n\t\t\telse if (end === -1) {\n\t\t\t\tend = path.length;\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t} else {\n\t\t\tfor (i = path.length - 1; i >= start; --i) {\n\t\t\t\tif (isPathSeparator(path.charCodeAt(i))) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (end === -1) {\n\t\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t\t// path component\n\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\tend = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end === -1) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t}\n\t},\n\n\textname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tlet start = 0;\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Check for a drive letter prefix so as not to mistake the following\n\t\t// path separator as an extra separator at the end of the path that can be\n\t\t// disregarded\n\n\t\tif (path.length >= 2 &&\n\t\t\tpath.charCodeAt(1) === CHAR_COLON &&\n\t\t\tisWindowsDeviceRoot(path.charCodeAt(0))) {\n\t\t\tstart = startPart = 2;\n\t\t}\n\n\t\tfor (let i = path.length - 1; i >= start; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn path.slice(startDot, end);\n\t},\n\n\tformat(pathObject): string {\n\t\tif (pathObject === null || typeof pathObject !== 'object') {\n\t\t\tthrow new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n\t\t}\n\n\t\treturn _format('\\\\', pathObject);\n\t},\n\n\n\tparse(path) {\n\t\tvalidateString(path, 'path');\n\n\t\tconst ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\t\tif (path.length === 0) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tconst len = path.length;\n\t\tlet rootEnd = 0;\n\t\tlet code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\trootEnd = 1;\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\n\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\trootEnd = j + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\trootEnd = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\tif (len === 3) {\n\t\t\t\t\t\t\t\t// `path` contains just a drive root, exit early to avoid\n\t\t\t\t\t\t\t\t// unnecessary work\n\t\t\t\t\t\t\t\tret.root = ret.dir = path;\n\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// `path` contains just a drive root, exit early to avoid\n\t\t\t\t\t\t// unnecessary work\n\t\t\t\t\t\tret.root = ret.dir = path;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid\n\t\t\t// unnecessary work\n\t\t\tret.root = ret.dir = path;\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (rootEnd > 0) {\n\t\t\tret.root = path.slice(0, rootEnd);\n\t\t}\n\n\t\tlet startDot = -1;\n\t\tlet startPart = rootEnd;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i = path.length - 1;\n\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Get non-dir info\n\t\tfor (; i >= rootEnd; --i) {\n\t\t\tcode = path.charCodeAt(i);\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\tif (end !== -1) {\n\t\t\t\tret.base = ret.name = path.slice(startPart, end);\n\t\t\t}\n\t\t} else {\n\t\t\tret.name = path.slice(startPart, startDot);\n\t\t\tret.base = path.slice(startPart, end);\n\t\t\tret.ext = path.slice(startDot, end);\n\t\t}\n\n\t\t// If the directory is the root, use the entire root as the `dir` including\n\t\t// the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n\t\t// trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n\t\tif (startPart > 0 && startPart !== rootEnd) {\n\t\t\tret.dir = path.slice(0, startPart - 1);\n\t\t}\n\t\telse {\n\t\t\tret.dir = ret.root;\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tsep: '\\\\',\n\tdelimiter: ';',\n\twin32: null,\n\tposix: null\n};\n\nexport const posix: IPath = {\n\t// path.resolve([from ...], to)\n\tresolve(...pathSegments: string[]): string {\n\t\tlet resolvedPath = '';\n\t\tlet resolvedAbsolute = false;\n\n\t\tfor (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t\t\tlet path;\n\t\t\tif (i >= 0) {\n\t\t\t\tpath = pathSegments[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = process.cwd();\n\t\t\t}\n\n\t\t\tvalidateString(path, 'path');\n\n\t\t\t// Skip empty entries\n\t\t\tif (path.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresolvedPath = path + '/' + resolvedPath;\n\t\t\tresolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\t}\n\n\t\t// At this point the path should be resolved to a full absolute path, but\n\t\t// handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t\t// Normalize the path\n\t\tresolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\n\t\t\tisPosixPathSeparator);\n\n\t\tif (resolvedAbsolute) {\n\t\t\tif (resolvedPath.length > 0) {\n\t\t\t\treturn '/' + resolvedPath;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '/';\n\t\t\t}\n\t\t} else if (resolvedPath.length > 0) {\n\t\t\treturn resolvedPath;\n\t\t} else {\n\t\t\treturn '.';\n\t\t}\n\t},\n\n\tnormalize(path: string): string {\n\t\tvalidateString(path, 'path');\n\n\t\tif (path.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\n\t\tconst isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tconst trailingSeparator =\n\t\t\tpath.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n\t\t// Normalize the path\n\t\tpath = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n\n\t\tif (path.length === 0 && !isAbsolute) {\n\t\t\tpath = '.';\n\t\t}\n\t\tif (path.length > 0 && trailingSeparator) {\n\t\t\tpath += '/';\n\t\t}\n\n\t\tif (isAbsolute) {\n\t\t\treturn '/' + path;\n\t\t}\n\t\treturn path;\n\t},\n\n\tisAbsolute(path: string): boolean {\n\t\tvalidateString(path, 'path');\n\t\treturn path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t},\n\n\tjoin(...paths: string[]): string {\n\t\tif (paths.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet joined;\n\t\tfor (let i = 0; i < paths.length; ++i) {\n\t\t\tconst arg = arguments[i];\n\t\t\tvalidateString(arg, 'path');\n\t\t\tif (arg.length > 0) {\n\t\t\t\tif (joined === undefined) {\n\t\t\t\t\tjoined = arg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tjoined += '/' + arg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (joined === undefined) {\n\t\t\treturn '.';\n\t\t}\n\t\treturn posix.normalize(joined);\n\t},\n\n\trelative(from: string, to: string): string {\n\t\tvalidateString(from, 'from');\n\t\tvalidateString(to, 'to');\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\tfrom = posix.resolve(from);\n\t\tto = posix.resolve(to);\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Trim any leading backslashes\n\t\tlet fromStart = 1;\n\t\tfor (; fromStart < from.length; ++fromStart) {\n\t\t\tif (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst fromEnd = from.length;\n\t\tconst fromLen = (fromEnd - fromStart);\n\n\t\t// Trim any leading backslashes\n\t\tlet toStart = 1;\n\t\tfor (; toStart < to.length; ++toStart) {\n\t\t\tif (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst toEnd = to.length;\n\t\tconst toLen = (toEnd - toStart);\n\n\t\t// Compare paths to find the longest common path from root\n\t\tconst length = (fromLen < toLen ? fromLen : toLen);\n\t\tlet lastCommonSep = -1;\n\t\tlet i = 0;\n\t\tfor (; i <= length; ++i) {\n\t\t\tif (i === length) {\n\t\t\t\tif (toLen > length) {\n\t\t\t\t\tif (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `from` is the exact base path for `to`.\n\t\t\t\t\t\t// For example: from='/foo/bar'; to='/foo/bar/baz'\n\t\t\t\t\t\treturn to.slice(toStart + i + 1);\n\t\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t\t// We get here if `from` is the root\n\t\t\t\t\t\t// For example: from='/'; to='/foo'\n\t\t\t\t\t\treturn to.slice(toStart + i);\n\t\t\t\t\t}\n\t\t\t\t} else if (fromLen > length) {\n\t\t\t\t\tif (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `to` is the exact base path for `from`.\n\t\t\t\t\t\t// For example: from='/foo/bar/baz'; to='/foo/bar'\n\t\t\t\t\t\tlastCommonSep = i;\n\t\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t\t// We get here if `to` is the root.\n\t\t\t\t\t\t// For example: from='/foo'; to='/'\n\t\t\t\t\t\tlastCommonSep = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst fromCode = from.charCodeAt(fromStart + i);\n\t\t\tconst toCode = to.charCodeAt(toStart + i);\n\t\t\tif (fromCode !== toCode) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (fromCode === CHAR_FORWARD_SLASH) {\n\t\t\t\tlastCommonSep = i;\n\t\t\t}\n\t\t}\n\n\t\tlet out = '';\n\t\t// Generate the relative path based on the path difference between `to`\n\t\t// and `from`\n\t\tfor (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n\t\t\tif (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\tif (out.length === 0) {\n\t\t\t\t\tout += '..';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout += '/..';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lastly, append the rest of the destination (`to`) path that comes after\n\t\t// the common path parts\n\t\tif (out.length > 0) {\n\t\t\treturn out + to.slice(toStart + lastCommonSep);\n\t\t}\n\t\telse {\n\t\t\ttoStart += lastCommonSep;\n\t\t\tif (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) {\n\t\t\t\t++toStart;\n\t\t\t}\n\t\t\treturn to.slice(toStart);\n\t\t}\n\t},\n\n\ttoNamespacedPath(path: string): string {\n\t\t// Non-op on posix systems\n\t\treturn path;\n\t},\n\n\tdirname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tif (path.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tconst hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tfor (let i = path.length - 1; i >= 1; --i) {\n\t\t\tif (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We saw the first non-path separator\n\t\t\t\tmatchedSlash = false;\n\t\t\t}\n\t\t}\n\n\t\tif (end === -1) {\n\t\t\treturn hasRoot ? '/' : '.';\n\t\t}\n\t\tif (hasRoot && end === 1) {\n\t\t\treturn '//';\n\t\t}\n\t\treturn path.slice(0, end);\n\t},\n\n\tbasename(path: string, ext?: string): string {\n\t\tif (ext !== undefined) {\n\t\t\tvalidateString(ext, 'ext');\n\t\t}\n\t\tvalidateString(path, 'path');\n\n\t\tlet start = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i;\n\n\t\tif (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n\t\t\tif (ext.length === path.length && ext === path) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet extIdx = ext.length - 1;\n\t\t\tlet firstNonSlashEnd = -1;\n\t\t\tfor (i = path.length - 1; i >= 0; --i) {\n\t\t\t\tconst code = path.charCodeAt(i);\n\t\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (firstNonSlashEnd === -1) {\n\t\t\t\t\t\t// We saw the first non-path separator, remember this index in case\n\t\t\t\t\t\t// we need it if the extension ends up not matching\n\t\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\t\tfirstNonSlashEnd = i + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (extIdx >= 0) {\n\t\t\t\t\t\t// Try to match the explicit extension\n\t\t\t\t\t\tif (code === ext.charCodeAt(extIdx)) {\n\t\t\t\t\t\t\tif (--extIdx === -1) {\n\t\t\t\t\t\t\t\t// We matched the extension, so mark this as the end of our path\n\t\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Extension does not match, so our result is the entire path\n\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\textIdx = -1;\n\t\t\t\t\t\t\tend = firstNonSlashEnd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === end) {\n\t\t\t\tend = firstNonSlashEnd;\n\t\t\t}\n\t\t\telse if (end === -1) {\n\t\t\t\tend = path.length;\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t} else {\n\t\t\tfor (i = path.length - 1; i >= 0; --i) {\n\t\t\t\tif (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (end === -1) {\n\t\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t\t// path component\n\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\tend = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end === -1) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t}\n\t},\n\n\textname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\t\tfor (let i = path.length - 1; i >= 0; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn path.slice(startDot, end);\n\t},\n\n\tformat(pathObject): string {\n\t\tif (pathObject === null || typeof pathObject !== 'object') {\n\t\t\tthrow new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n\t\t}\n\n\t\treturn _format('/', pathObject);\n\t},\n\n\tparse(path: string): ParsedPath {\n\t\tvalidateString(path, 'path');\n\n\t\tconst ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\t\tif (path.length === 0) {\n\t\t\treturn ret;\n\t\t}\n\t\tconst isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tlet start;\n\t\tif (isAbsolute) {\n\t\t\tret.root = '/';\n\t\t\tstart = 1;\n\t\t} else {\n\t\t\tstart = 0;\n\t\t}\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i = path.length - 1;\n\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Get non-dir info\n\t\tfor (; i >= start; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\tif (end !== -1) {\n\t\t\t\tif (startPart === 0 && isAbsolute) {\n\t\t\t\t\tret.base = ret.name = path.slice(1, end);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret.base = ret.name = path.slice(startPart, end);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (startPart === 0 && isAbsolute) {\n\t\t\t\tret.name = path.slice(1, startDot);\n\t\t\t\tret.base = path.slice(1, end);\n\t\t\t} else {\n\t\t\t\tret.name = path.slice(startPart, startDot);\n\t\t\t\tret.base = path.slice(startPart, end);\n\t\t\t}\n\t\t\tret.ext = path.slice(startDot, end);\n\t\t}\n\n\t\tif (startPart > 0) {\n\t\t\tret.dir = path.slice(0, startPart - 1);\n\t\t}\n\t\telse if (isAbsolute) {\n\t\t\tret.dir = '/';\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tsep: '/',\n\tdelimiter: ':',\n\twin32: null,\n\tposix: null\n};\n\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\n\nexport const normalize = (process.platform === 'win32' ? win32.normalize : posix.normalize);\nexport const isAbsolute = (process.platform === 'win32' ? win32.isAbsolute : posix.isAbsolute);\nexport const join = (process.platform === 'win32' ? win32.join : posix.join);\nexport const resolve = (process.platform === 'win32' ? win32.resolve : posix.resolve);\nexport const relative = (process.platform === 'win32' ? win32.relative : posix.relative);\nexport const dirname = (process.platform === 'win32' ? win32.dirname : posix.dirname);\nexport const basename = (process.platform === 'win32' ? win32.basename : posix.basename);\nexport const extname = (process.platform === 'win32' ? win32.extname : posix.extname);\nexport const format = (process.platform === 'win32' ? win32.format : posix.format);\nexport const parse = (process.platform === 'win32' ? win32.parse : posix.parse);\nexport const toNamespacedPath = (process.platform === 'win32' ? win32.toNamespacedPath : posix.toNamespacedPath);\nexport const sep = (process.platform === 'win32' ? win32.sep : posix.sep);\nexport const delimiter = (process.platform === 'win32' ? win32.delimiter : posix.delimiter);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWindows } from 'vs/base/common/platform';\nimport { startsWithIgnoreCase, equalsIgnoreCase } from 'vs/base/common/strings';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { sep, posix } from 'vs/base/common/path';\n\nfunction isPathSeparator(code: number) {\n\treturn code === CharCode.Slash || code === CharCode.Backslash;\n}\n\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath: string) {\n\treturn osPath.replace(/[\\\\/]/g, posix.sep);\n}\n\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path: string, sep: string = posix.sep): string {\n\n\tif (!path) {\n\t\treturn '';\n\t}\n\n\tconst len = path.length;\n\tconst firstLetter = path.charCodeAt(0);\n\tif (isPathSeparator(firstLetter)) {\n\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t// UNC candidate \\\\localhost\\shares\\ddd\n\t\t\t//               ^^^^^^^^^^^^^^^^^^^\n\t\t\tif (!isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\tlet pos = 3;\n\t\t\t\tconst start = pos;\n\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\t\treturn path.slice(0, pos + 1) // consume this separator\n\t\t\t\t\t\t\t\t.replace(/[\\\\/]/g, sep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// /user/far\n\t\t// ^\n\t\treturn sep;\n\n\t} else if (isWindowsDriveLetter(firstLetter)) {\n\t\t// check for windows drive letter c:\\ or c:\n\n\t\tif (path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t// C:\\fff\n\t\t\t\t// ^^^\n\t\t\t\treturn path.slice(0, 2) + sep;\n\t\t\t} else {\n\t\t\t\t// C:\n\t\t\t\t// ^^\n\t\t\t\treturn path.slice(0, 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for URI\n\t// scheme://authority/path\n\t// ^^^^^^^^^^^^^^^^^^^\n\tlet pos = path.indexOf('://');\n\tif (pos !== -1) {\n\t\tpos += 3; // 3 -> \"://\".length\n\t\tfor (; pos < len; pos++) {\n\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\treturn path.slice(0, pos + 1); // consume this separator\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nexport function isUNC(path: string): boolean {\n\tif (!isWindows) {\n\t\t// UNC is a windows concept\n\t\treturn false;\n\t}\n\n\tif (!path || path.length < 5) {\n\t\t// at least \\\\a\\b\n\t\treturn false;\n\t}\n\n\tlet code = path.charCodeAt(0);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(1);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tlet pos = 2;\n\tconst start = pos;\n\tfor (; pos < path.length; pos++) {\n\t\tcode = path.charCodeAt(pos);\n\t\tif (code === CharCode.Backslash) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (start === pos) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(pos + 1);\n\tif (isNaN(code) || code === CharCode.Backslash) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst INVALID_FILE_CHARS = isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\nexport function isValidBasename(name: string | null | undefined): boolean {\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tINVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\n\tif (INVALID_FILE_CHARS.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindows && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindows && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (name.length > 255) {\n\t\treturn false; // most file systems do not allow files > 255 lenth\n\t}\n\n\treturn true;\n}\n\nexport function isEqual(pathA: string, pathB: string, ignoreCase?: boolean): boolean {\n\tconst identityEquals = (pathA === pathB);\n\tif (!ignoreCase || identityEquals) {\n\t\treturn identityEquals;\n\t}\n\n\tif (!pathA || !pathB) {\n\t\treturn false;\n\t}\n\n\treturn equalsIgnoreCase(pathA, pathB);\n}\n\nexport function isEqualOrParent(path: string, candidate: string, ignoreCase?: boolean, separator = sep): boolean {\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (!path || !candidate) {\n\t\treturn false;\n\t}\n\n\tif (candidate.length > path.length) {\n\t\treturn false;\n\t}\n\n\tif (ignoreCase) {\n\t\tconst beginsWith = startsWithIgnoreCase(path, candidate);\n\t\tif (!beginsWith) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (candidate.length === path.length) {\n\t\t\treturn true; // same path, different casing\n\t\t}\n\n\t\tlet sepOffset = candidate.length;\n\t\tif (candidate.charAt(candidate.length - 1) === separator) {\n\t\t\tsepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n\t\t}\n\n\t\treturn path.charAt(sepOffset) === separator;\n\t}\n\n\tif (candidate.charAt(candidate.length - 1) !== separator) {\n\t\tcandidate += separator;\n\t}\n\n\treturn path.indexOf(candidate) === 0;\n}\n\nexport function isWindowsDriveLetter(char0: number): boolean {\n\treturn char0 >= CharCode.A && char0 <= CharCode.Z || char0 >= CharCode.a && char0 <= CharCode.z;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Iterator, IteratorResult, FIN } from './iterator';\n\nexport function values<V = any>(set: Set<V>): V[];\nexport function values<K = any, V = any>(map: Map<K, V>): V[];\nexport function values<V>(forEachable: { forEach(callback: (value: V, ...more: any[]) => any): void }): V[] {\n\tconst result: V[] = [];\n\tforEachable.forEach(value => result.push(value));\n\treturn result;\n}\n\nexport function keys<K, V>(map: Map<K, V>): K[] {\n\tconst result: K[] = [];\n\tmap.forEach((value, key) => result.push(key));\n\n\treturn result;\n}\n\nexport function getOrSet<K, V>(map: Map<K, V>, key: K, value: V): V {\n\tlet result = map.get(key);\n\tif (result === undefined) {\n\t\tresult = value;\n\t\tmap.set(key, result);\n\t}\n\n\treturn result;\n}\n\nexport function mapToString<K, V>(map: Map<K, V>): string {\n\tconst entries: string[] = [];\n\tmap.forEach((value, key) => {\n\t\tentries.push(`${key} => ${value}`);\n\t});\n\n\treturn `Map(${map.size}) {${entries.join(', ')}}`;\n}\n\nexport function setToString<K>(set: Set<K>): string {\n\tconst entries: K[] = [];\n\tset.forEach(value => {\n\t\tentries.push(value);\n\t});\n\n\treturn `Set(${set.size}) {${entries.join(', ')}}`;\n}\n\nexport function mapToSerializable(map: Map<string, string>): [string, string][] {\n\tconst serializable: [string, string][] = [];\n\n\tmap.forEach((value, key) => {\n\t\tserializable.push([key, value]);\n\t});\n\n\treturn serializable;\n}\n\nexport function serializableToMap(serializable: [string, string][]): Map<string, string> {\n\tconst items = new Map<string, string>();\n\n\tfor (const [key, value] of serializable) {\n\t\titems.set(key, value);\n\t}\n\n\treturn items;\n}\n\nexport interface IKeyIterator {\n\treset(key: string): this;\n\tnext(): this;\n\n\thasNext(): boolean;\n\tcmp(a: string): number;\n\tvalue(): string;\n}\n\nexport class StringIterator implements IKeyIterator {\n\n\tprivate _value: string = '';\n\tprivate _pos: number = 0;\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._pos = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tthis._pos += 1;\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._pos < this._value.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tconst aCode = a.charCodeAt(0);\n\t\tconst thisCode = this._value.charCodeAt(this._pos);\n\t\treturn aCode - thisCode;\n\t}\n\n\tvalue(): string {\n\t\treturn this._value[this._pos];\n\t}\n}\n\nexport class PathIterator implements IKeyIterator {\n\n\tprivate _value: string;\n\tprivate _from: number;\n\tprivate _to: number;\n\n\treset(key: string): this {\n\t\tthis._value = key.replace(/\\\\$|\\/$/, '');\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Slash || ch === CharCode.Backslash) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\n\t\tlet aPos = 0;\n\t\tconst aLen = a.length;\n\t\tlet thisPos = this._from;\n\n\t\twhile (aPos < aLen && thisPos < this._to) {\n\t\t\tconst cmp = a.charCodeAt(aPos) - this._value.charCodeAt(thisPos);\n\t\t\tif (cmp !== 0) {\n\t\t\t\treturn cmp;\n\t\t\t}\n\t\t\taPos += 1;\n\t\t\tthisPos += 1;\n\t\t}\n\n\t\tif (aLen === this._to - this._from) {\n\t\t\treturn 0;\n\t\t} else if (aPos < aLen) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nclass TernarySearchTreeNode<E> {\n\tsegment: string;\n\tvalue: E | undefined;\n\tkey: string;\n\tleft: TernarySearchTreeNode<E> | undefined;\n\tmid: TernarySearchTreeNode<E> | undefined;\n\tright: TernarySearchTreeNode<E> | undefined;\n\n\tisEmpty(): boolean {\n\t\treturn !this.left && !this.mid && !this.right && !this.value;\n\t}\n}\n\nexport class TernarySearchTree<E> {\n\n\tstatic forPaths<E>(): TernarySearchTree<E> {\n\t\treturn new TernarySearchTree<E>(new PathIterator());\n\t}\n\n\tstatic forStrings<E>(): TernarySearchTree<E> {\n\t\treturn new TernarySearchTree<E>(new StringIterator());\n\t}\n\n\tprivate _iter: IKeyIterator;\n\tprivate _root: TernarySearchTreeNode<E> | undefined;\n\n\tconstructor(segments: IKeyIterator) {\n\t\tthis._iter = segments;\n\t}\n\n\tclear(): void {\n\t\tthis._root = undefined;\n\t}\n\n\tset(key: string, element: E): E | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node: TernarySearchTreeNode<E>;\n\n\t\tif (!this._root) {\n\t\t\tthis._root = new TernarySearchTreeNode<E>();\n\t\t\tthis._root.segment = iter.value();\n\t\t}\n\n\t\tnode = this._root;\n\t\twhile (true) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tif (!node.left) {\n\t\t\t\t\tnode.left = new TernarySearchTreeNode<E>();\n\t\t\t\t\tnode.left.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.left;\n\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tif (!node.right) {\n\t\t\t\t\tnode.right = new TernarySearchTreeNode<E>();\n\t\t\t\t\tnode.right.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.right;\n\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tnode.mid = new TernarySearchTreeNode<E>();\n\t\t\t\t\tnode.mid.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst oldElement = node.value;\n\t\tnode.value = element;\n\t\tnode.key = key;\n\t\treturn oldElement;\n\t}\n\n\tget(key: string): E | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node ? node.value : undefined;\n\t}\n\n\tdelete(key: string): void {\n\n\t\tconst iter = this._iter.reset(key);\n\t\tconst stack: [-1 | 0 | 1, TernarySearchTreeNode<E>][] = [];\n\t\tlet node = this._root;\n\n\t\t// find and unset node\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tstack.push([1, node]);\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tstack.push([-1, node]);\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tstack.push([0, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// remove element\n\t\t\t\tnode.value = undefined;\n\n\t\t\t\t// clean up empty nodes\n\t\t\t\twhile (stack.length > 0 && node.isEmpty()) {\n\t\t\t\t\tlet [dir, parent] = stack.pop()!;\n\t\t\t\t\tswitch (dir) {\n\t\t\t\t\t\tcase 1: parent.left = undefined; break;\n\t\t\t\t\t\tcase 0: parent.mid = undefined; break;\n\t\t\t\t\t\tcase -1: parent.right = undefined; break;\n\t\t\t\t\t}\n\t\t\t\t\tnode = parent;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfindSubstr(key: string): E | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\tlet candidate: E | undefined = undefined;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tcandidate = node.value || candidate;\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node && node.value || candidate;\n\t}\n\n\tfindSuperstr(key: string): Iterator<E> | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// collect\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._nodeIterator(node.mid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _nodeIterator(node: TernarySearchTreeNode<E>): Iterator<E> {\n\t\tlet res: { done: false; value: E; };\n\t\tlet idx: number;\n\t\tlet data: E[];\n\t\tconst next = (): IteratorResult<E> => {\n\t\t\tif (!data) {\n\t\t\t\t// lazy till first invocation\n\t\t\t\tdata = [];\n\t\t\t\tidx = 0;\n\t\t\t\tthis._forEach(node, value => data.push(value));\n\t\t\t}\n\t\t\tif (idx >= data.length) {\n\t\t\t\treturn FIN;\n\t\t\t}\n\n\t\t\tif (!res) {\n\t\t\t\tres = { done: false, value: data[idx++] };\n\t\t\t} else {\n\t\t\t\tres.value = data[idx++];\n\t\t\t}\n\t\t\treturn res;\n\t\t};\n\t\treturn { next };\n\t}\n\n\tforEach(callback: (value: E, index: string) => any) {\n\t\tthis._forEach(this._root, callback);\n\t}\n\n\tprivate _forEach(node: TernarySearchTreeNode<E> | undefined, callback: (value: E, index: string) => any) {\n\t\tif (node) {\n\t\t\t// left\n\t\t\tthis._forEach(node.left, callback);\n\n\t\t\t// node\n\t\t\tif (node.value) {\n\t\t\t\t// callback(node.value, this._iter.join(parts));\n\t\t\t\tcallback(node.value, node.key);\n\t\t\t}\n\t\t\t// mid\n\t\t\tthis._forEach(node.mid, callback);\n\n\t\t\t// right\n\t\t\tthis._forEach(node.right, callback);\n\t\t}\n\t}\n}\n\nexport class ResourceMap<T> {\n\n\tprotected readonly map: Map<string, T>;\n\tprotected readonly ignoreCase?: boolean;\n\n\tconstructor() {\n\t\tthis.map = new Map<string, T>();\n\t\tthis.ignoreCase = false; // in the future this should be an uri-comparator\n\t}\n\n\tset(resource: URI, value: T): void {\n\t\tthis.map.set(this.toKey(resource), value);\n\t}\n\n\tget(resource: URI): T | undefined {\n\t\treturn this.map.get(this.toKey(resource));\n\t}\n\n\thas(resource: URI): boolean {\n\t\treturn this.map.has(this.toKey(resource));\n\t}\n\n\tget size(): number {\n\t\treturn this.map.size;\n\t}\n\n\tclear(): void {\n\t\tthis.map.clear();\n\t}\n\n\tdelete(resource: URI): boolean {\n\t\treturn this.map.delete(this.toKey(resource));\n\t}\n\n\tforEach(clb: (value: T) => void): void {\n\t\tthis.map.forEach(clb);\n\t}\n\n\tvalues(): T[] {\n\t\treturn values(this.map);\n\t}\n\n\tprivate toKey(resource: URI): string {\n\t\tlet key = resource.toString();\n\t\tif (this.ignoreCase) {\n\t\t\tkey = key.toLowerCase();\n\t\t}\n\n\t\treturn key;\n\t}\n\n\tkeys(): URI[] {\n\t\treturn keys(this.map).map(k => URI.parse(k));\n\t}\n\n\tclone(): ResourceMap<T> {\n\t\tconst resourceMap = new ResourceMap<T>();\n\n\t\tthis.map.forEach((value, key) => resourceMap.map.set(key, value));\n\n\t\treturn resourceMap;\n\t}\n}\n\n// We should fold BoundedMap and LinkedMap. See https://github.com/Microsoft/vscode/issues/28496\n\ninterface Item<K, V> {\n\tprevious: Item<K, V> | undefined;\n\tnext: Item<K, V> | undefined;\n\tkey: K;\n\tvalue: V;\n}\n\nexport const enum Touch {\n\tNone = 0,\n\tAsOld = 1,\n\tAsNew = 2\n}\n\nexport class LinkedMap<K, V> {\n\n\tprivate _map: Map<K, Item<K, V>>;\n\tprivate _head: Item<K, V> | undefined;\n\tprivate _tail: Item<K, V> | undefined;\n\tprivate _size: number;\n\n\tconstructor() {\n\t\tthis._map = new Map<K, Item<K, V>>();\n\t\tthis._head = undefined;\n\t\tthis._tail = undefined;\n\t\tthis._size = 0;\n\t}\n\n\tclear(): void {\n\t\tthis._map.clear();\n\t\tthis._head = undefined;\n\t\tthis._tail = undefined;\n\t\tthis._size = 0;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn !this._head && !this._tail;\n\t}\n\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\thas(key: K): boolean {\n\t\treturn this._map.has(key);\n\t}\n\n\tget(key: K, touch: Touch = Touch.None): V | undefined {\n\t\tconst item = this._map.get(key);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (touch !== Touch.None) {\n\t\t\tthis.touch(item, touch);\n\t\t}\n\t\treturn item.value;\n\t}\n\n\tset(key: K, value: V, touch: Touch = Touch.None): void {\n\t\tlet item = this._map.get(key);\n\t\tif (item) {\n\t\t\titem.value = value;\n\t\t\tif (touch !== Touch.None) {\n\t\t\t\tthis.touch(item, touch);\n\t\t\t}\n\t\t} else {\n\t\t\titem = { key, value, next: undefined, previous: undefined };\n\t\t\tswitch (touch) {\n\t\t\t\tcase Touch.None:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Touch.AsOld:\n\t\t\t\t\tthis.addItemFirst(item);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Touch.AsNew:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._map.set(key, item);\n\t\t\tthis._size++;\n\t\t}\n\t}\n\n\tdelete(key: K): boolean {\n\t\treturn !!this.remove(key);\n\t}\n\n\tremove(key: K): V | undefined {\n\t\tconst item = this._map.get(key);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._map.delete(key);\n\t\tthis.removeItem(item);\n\t\tthis._size--;\n\t\treturn item.value;\n\t}\n\n\tshift(): V | undefined {\n\t\tif (!this._head && !this._tail) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!this._head || !this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t}\n\t\tconst item = this._head;\n\t\tthis._map.delete(item.key);\n\t\tthis.removeItem(item);\n\t\tthis._size--;\n\t\treturn item.value;\n\t}\n\n\tforEach(callbackfn: (value: V, key: K, map: LinkedMap<K, V>) => void, thisArg?: any): void {\n\t\tlet current = this._head;\n\t\twhile (current) {\n\t\t\tif (thisArg) {\n\t\t\t\tcallbackfn.bind(thisArg)(current.value, current.key, this);\n\t\t\t} else {\n\t\t\t\tcallbackfn(current.value, current.key, this);\n\t\t\t}\n\t\t\tcurrent = current.next;\n\t\t}\n\t}\n\n\tvalues(): V[] {\n\t\tconst result: V[] = [];\n\t\tlet current = this._head;\n\t\twhile (current) {\n\t\t\tresult.push(current.value);\n\t\t\tcurrent = current.next;\n\t\t}\n\t\treturn result;\n\t}\n\n\tkeys(): K[] {\n\t\tconst result: K[] = [];\n\t\tlet current = this._head;\n\t\twhile (current) {\n\t\t\tresult.push(current.key);\n\t\t\tcurrent = current.next;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/* VS Code / Monaco editor runs on es5 which has no Symbol.iterator\n\tkeys(): IterableIterator<K> {\n\t\tconst current = this._head;\n\t\tconst iterator: IterableIterator<K> = {\n\t\t\t[Symbol.iterator]() {\n\t\t\t\treturn iterator;\n\t\t\t},\n\t\t\tnext():IteratorResult<K> {\n\t\t\t\tif (current) {\n\t\t\t\t\tconst result = { value: current.key, done: false };\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: undefined, done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn iterator;\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\tconst current = this._head;\n\t\tconst iterator: IterableIterator<V> = {\n\t\t\t[Symbol.iterator]() {\n\t\t\t\treturn iterator;\n\t\t\t},\n\t\t\tnext():IteratorResult<V> {\n\t\t\t\tif (current) {\n\t\t\t\t\tconst result = { value: current.value, done: false };\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: undefined, done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn iterator;\n\t}\n\t*/\n\n\tprotected trimOld(newSize: number) {\n\t\tif (newSize >= this.size) {\n\t\t\treturn;\n\t\t}\n\t\tif (newSize === 0) {\n\t\t\tthis.clear();\n\t\t\treturn;\n\t\t}\n\t\tlet current = this._head;\n\t\tlet currentSize = this.size;\n\t\twhile (current && currentSize > newSize) {\n\t\t\tthis._map.delete(current.key);\n\t\t\tcurrent = current.next;\n\t\t\tcurrentSize--;\n\t\t}\n\t\tthis._head = current;\n\t\tthis._size = currentSize;\n\t\tif (current) {\n\t\t\tcurrent.previous = undefined;\n\t\t}\n\t}\n\n\tprivate addItemFirst(item: Item<K, V>): void {\n\t\t// First time Insert\n\t\tif (!this._head && !this._tail) {\n\t\t\tthis._tail = item;\n\t\t} else if (!this._head) {\n\t\t\tthrow new Error('Invalid list');\n\t\t} else {\n\t\t\titem.next = this._head;\n\t\t\tthis._head.previous = item;\n\t\t}\n\t\tthis._head = item;\n\t}\n\n\tprivate addItemLast(item: Item<K, V>): void {\n\t\t// First time Insert\n\t\tif (!this._head && !this._tail) {\n\t\t\tthis._head = item;\n\t\t} else if (!this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t} else {\n\t\t\titem.previous = this._tail;\n\t\t\tthis._tail.next = item;\n\t\t}\n\t\tthis._tail = item;\n\t}\n\n\tprivate removeItem(item: Item<K, V>): void {\n\t\tif (item === this._head && item === this._tail) {\n\t\t\tthis._head = undefined;\n\t\t\tthis._tail = undefined;\n\t\t}\n\t\telse if (item === this._head) {\n\t\t\t// This can only happend if size === 1 which is handle\n\t\t\t// by the case above.\n\t\t\tif (!item.next) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\titem.next.previous = undefined;\n\t\t\tthis._head = item.next;\n\t\t}\n\t\telse if (item === this._tail) {\n\t\t\t// This can only happend if size === 1 which is handle\n\t\t\t// by the case above.\n\t\t\tif (!item.previous) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\titem.previous.next = undefined;\n\t\t\tthis._tail = item.previous;\n\t\t}\n\t\telse {\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\t\t\tif (!next || !previous) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\tnext.previous = previous;\n\t\t\tprevious.next = next;\n\t\t}\n\t\titem.next = undefined;\n\t\titem.previous = undefined;\n\t}\n\n\tprivate touch(item: Item<K, V>, touch: Touch): void {\n\t\tif (!this._head || !this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t}\n\t\tif ((touch !== Touch.AsOld && touch !== Touch.AsNew)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (touch === Touch.AsOld) {\n\t\t\tif (item === this._head) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\n\t\t\t// Unlink the item\n\t\t\tif (item === this._tail) {\n\t\t\t\t// previous must be defined since item was not head but is tail\n\t\t\t\t// So there are more than on item in the map\n\t\t\t\tprevious!.next = undefined;\n\t\t\t\tthis._tail = previous;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Both next and previous are not undefined since item was neither head nor tail.\n\t\t\t\tnext!.previous = previous;\n\t\t\t\tprevious!.next = next;\n\t\t\t}\n\n\t\t\t// Insert the node at head\n\t\t\titem.previous = undefined;\n\t\t\titem.next = this._head;\n\t\t\tthis._head.previous = item;\n\t\t\tthis._head = item;\n\t\t} else if (touch === Touch.AsNew) {\n\t\t\tif (item === this._tail) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\n\t\t\t// Unlink the item.\n\t\t\tif (item === this._head) {\n\t\t\t\t// next must be defined since item was not tail but is head\n\t\t\t\t// So there are more than on item in the map\n\t\t\t\tnext!.previous = undefined;\n\t\t\t\tthis._head = next;\n\t\t\t} else {\n\t\t\t\t// Both next and previous are not undefined since item was neither head nor tail.\n\t\t\t\tnext!.previous = previous;\n\t\t\t\tprevious!.next = next;\n\t\t\t}\n\t\t\titem.next = undefined;\n\t\t\titem.previous = this._tail;\n\t\t\tthis._tail.next = item;\n\t\t\tthis._tail = item;\n\t\t}\n\t}\n\n\ttoJSON(): [K, V][] {\n\t\tconst data: [K, V][] = [];\n\n\t\tthis.forEach((value, key) => {\n\t\t\tdata.push([key, value]);\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tfromJSON(data: [K, V][]): void {\n\t\tthis.clear();\n\n\t\tfor (const [key, value] of data) {\n\t\t\tthis.set(key, value);\n\t\t}\n\t}\n}\n\nexport class LRUCache<K, V> extends LinkedMap<K, V> {\n\n\tprivate _limit: number;\n\tprivate _ratio: number;\n\n\tconstructor(limit: number, ratio: number = 1) {\n\t\tsuper();\n\t\tthis._limit = limit;\n\t\tthis._ratio = Math.min(Math.max(0, ratio), 1);\n\t}\n\n\tget limit(): number {\n\t\treturn this._limit;\n\t}\n\n\tset limit(limit: number) {\n\t\tthis._limit = limit;\n\t\tthis.checkTrim();\n\t}\n\n\tget ratio(): number {\n\t\treturn this._ratio;\n\t}\n\n\tset ratio(ratio: number) {\n\t\tthis._ratio = Math.min(Math.max(0, ratio), 1);\n\t\tthis.checkTrim();\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn super.get(key, Touch.AsNew);\n\t}\n\n\tpeek(key: K): V | undefined {\n\t\treturn super.get(key, Touch.None);\n\t}\n\n\tset(key: K, value: V): void {\n\t\tsuper.set(key, value, Touch.AsNew);\n\t\tthis.checkTrim();\n\t}\n\n\tprivate checkTrim() {\n\t\tif (this.size > this._limit) {\n\t\t\tthis.trimOld(Math.round(this._limit * this._ratio));\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport * as strings from 'vs/base/common/strings';\nimport * as extpath from 'vs/base/common/extpath';\nimport * as paths from 'vs/base/common/path';\nimport { LRUCache } from 'vs/base/common/map';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { isThenable } from 'vs/base/common/async';\n\nexport interface IExpression {\n\t[pattern: string]: boolean | SiblingClause | any;\n}\n\nexport interface IRelativePattern {\n\tbase: string;\n\tpattern: string;\n}\n\nexport function getEmptyExpression(): IExpression {\n\treturn Object.create(null);\n}\n\nexport interface SiblingClause {\n\twhen: string;\n}\n\nconst GLOBSTAR = '**';\nconst GLOB_SPLIT = '/';\nconst PATH_REGEX = '[/\\\\\\\\]';\t\t// any slash or backslash\nconst NO_PATH_REGEX = '[^/\\\\\\\\]';\t// any non-slash and non-backslash\nconst ALL_FORWARD_SLASHES = /\\//g;\n\nfunction starsToRegExp(starCount: number): string {\n\tswitch (starCount) {\n\t\tcase 0:\n\t\t\treturn '';\n\t\tcase 1:\n\t\t\treturn `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\n\t\tdefault:\n\t\t\t// Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times\n\t\t\t// Group is non capturing because we don't need to capture at all (?:...)\n\t\t\t// Overall we use non-greedy matching because it could be that we match too much\n\t\t\treturn `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}|${PATH_REGEX}${NO_PATH_REGEX}+)*?`;\n\t}\n}\n\nexport function splitGlobAware(pattern: string, splitChar: string): string[] {\n\tif (!pattern) {\n\t\treturn [];\n\t}\n\n\tconst segments: string[] = [];\n\n\tlet inBraces = false;\n\tlet inBrackets = false;\n\n\tlet curVal = '';\n\tfor (const char of pattern) {\n\t\tswitch (char) {\n\t\t\tcase splitChar:\n\t\t\t\tif (!inBraces && !inBrackets) {\n\t\t\t\t\tsegments.push(curVal);\n\t\t\t\t\tcurVal = '';\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '{':\n\t\t\t\tinBraces = true;\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tinBraces = false;\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tinBrackets = true;\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tinBrackets = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcurVal += char;\n\t}\n\n\t// Tail\n\tif (curVal) {\n\t\tsegments.push(curVal);\n\t}\n\n\treturn segments;\n}\n\nfunction parseRegExp(pattern: string): string {\n\tif (!pattern) {\n\t\treturn '';\n\t}\n\n\tlet regEx = '';\n\n\t// Split up into segments for each slash found\n\tconst segments = splitGlobAware(pattern, GLOB_SPLIT);\n\n\t// Special case where we only have globstars\n\tif (segments.every(s => s === GLOBSTAR)) {\n\t\tregEx = '.*';\n\t}\n\n\t// Build regex over segments\n\telse {\n\t\tlet previousSegmentWasGlobStar = false;\n\t\tsegments.forEach((segment, index) => {\n\n\t\t\t// Globstar is special\n\t\t\tif (segment === GLOBSTAR) {\n\n\t\t\t\t// if we have more than one globstar after another, just ignore it\n\t\t\t\tif (!previousSegmentWasGlobStar) {\n\t\t\t\t\tregEx += starsToRegExp(2);\n\t\t\t\t\tpreviousSegmentWasGlobStar = true;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// States\n\t\t\tlet inBraces = false;\n\t\t\tlet braceVal = '';\n\n\t\t\tlet inBrackets = false;\n\t\t\tlet bracketVal = '';\n\n\t\t\tfor (const char of segment) {\n\t\t\t\t// Support brace expansion\n\t\t\t\tif (char !== '}' && inBraces) {\n\t\t\t\t\tbraceVal += char;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Support brackets\n\t\t\t\tif (inBrackets && (char !== ']' || !bracketVal) /* ] is literally only allowed as first character in brackets to match it */) {\n\t\t\t\t\tlet res: string;\n\n\t\t\t\t\t// range operator\n\t\t\t\t\tif (char === '-') {\n\t\t\t\t\t\tres = char;\n\t\t\t\t\t}\n\n\t\t\t\t\t// negation operator (only valid on first index in bracket)\n\t\t\t\t\telse if ((char === '^' || char === '!') && !bracketVal) {\n\t\t\t\t\t\tres = '^';\n\t\t\t\t\t}\n\n\t\t\t\t\t// glob split matching is not allowed within character ranges\n\t\t\t\t\t// see http://man7.org/linux/man-pages/man7/glob.7.html\n\t\t\t\t\telse if (char === GLOB_SPLIT) {\n\t\t\t\t\t\tres = '';\n\t\t\t\t\t}\n\n\t\t\t\t\t// anything else gets escaped\n\t\t\t\t\telse {\n\t\t\t\t\t\tres = strings.escapeRegExpCharacters(char);\n\t\t\t\t\t}\n\n\t\t\t\t\tbracketVal += res;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch (char) {\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tinBraces = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '[':\n\t\t\t\t\t\tinBrackets = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '}':\n\t\t\t\t\t\tconst choices = splitGlobAware(braceVal, ',');\n\n\t\t\t\t\t\t// Converts {foo,bar} => [foo|bar]\n\t\t\t\t\t\tconst braceRegExp = `(?:${choices.map(c => parseRegExp(c)).join('|')})`;\n\n\t\t\t\t\t\tregEx += braceRegExp;\n\n\t\t\t\t\t\tinBraces = false;\n\t\t\t\t\t\tbraceVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ']':\n\t\t\t\t\t\tregEx += ('[' + bracketVal + ']');\n\n\t\t\t\t\t\tinBrackets = false;\n\t\t\t\t\t\tbracketVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\tregEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tregEx += starsToRegExp(1);\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tregEx += strings.escapeRegExpCharacters(char);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tail: Add the slash we had split on if there is more to come and the remaining pattern is not a globstar\n\t\t\t// For example if pattern: some/**/*.js we want the \"/\" after some to be included in the RegEx to prevent\n\t\t\t// a folder called \"something\" to match as well.\n\t\t\t// However, if pattern: some/**, we tolerate that we also match on \"something\" because our globstar behaviour\n\t\t\t// is to match 0-N segments.\n\t\t\tif (index < segments.length - 1 && (segments[index + 1] !== GLOBSTAR || index + 2 < segments.length)) {\n\t\t\t\tregEx += PATH_REGEX;\n\t\t\t}\n\n\t\t\t// reset state\n\t\t\tpreviousSegmentWasGlobStar = false;\n\t\t});\n\t}\n\n\treturn regEx;\n}\n\n// regexes to check for trival glob patterns that just check for String#endsWith\nconst T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/; \t\t\t\t\t\t   \t\t\t// **/*.something\nconst T2 = /^\\*\\*\\/([\\w\\.-]+)\\/?$/; \t\t\t\t\t\t\t   \t\t\t// **/something\nconst T3 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?)*}$/; \t// {**/*.something,**/*.else} or {**/package.json,**/project.json}\nconst T3_2 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?)*}$/; \t// Like T3, with optional trailing /**\nconst T4 = /^\\*\\*((\\/[\\w\\.-]+)+)\\/?$/; \t\t\t\t\t\t   \t\t\t// **/something/else\nconst T5 = /^([\\w\\.-]+(\\/[\\w\\.-]+)*)\\/?$/; \t\t\t\t\t\t   \t\t// something/else\n\nexport type ParsedPattern = (path: string, basename?: string) => boolean;\n\n// The ParsedExpression returns a Promise iff hasSibling returns a Promise.\nexport type ParsedExpression = (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>) => string | null | Promise<string | null> /* the matching pattern */;\n\nexport interface IGlobOptions {\n\t/**\n\t * Simplify patterns for use as exclusion filters during tree traversal to skip entire subtrees. Cannot be used outside of a tree traversal.\n\t */\n\ttrimForExclusions?: boolean;\n}\n\ninterface ParsedStringPattern {\n\t(path: string, basename: string): string | null | Promise<string | null> /* the matching pattern */;\n\tbasenames?: string[];\n\tpatterns?: string[];\n\tallBasenames?: string[];\n\tallPaths?: string[];\n}\ninterface ParsedExpressionPattern {\n\t(path: string, basename: string, name?: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | null | Promise<string | null> /* the matching pattern */;\n\trequiresSiblings?: boolean;\n\tallBasenames?: string[];\n\tallPaths?: string[];\n}\n\nconst CACHE = new LRUCache<string, ParsedStringPattern>(10000); // bounded to 10000 elements\n\nconst FALSE = function () {\n\treturn false;\n};\n\nconst NULL = function (): string | null {\n\treturn null;\n};\n\nfunction parsePattern(arg1: string | IRelativePattern, options: IGlobOptions): ParsedStringPattern {\n\tif (!arg1) {\n\t\treturn NULL;\n\t}\n\n\t// Handle IRelativePattern\n\tlet pattern: string;\n\tif (typeof arg1 !== 'string') {\n\t\tpattern = arg1.pattern;\n\t} else {\n\t\tpattern = arg1;\n\t}\n\n\t// Whitespace trimming\n\tpattern = pattern.trim();\n\n\t// Check cache\n\tconst patternKey = `${pattern}_${!!options.trimForExclusions}`;\n\tlet parsedPattern = CACHE.get(patternKey);\n\tif (parsedPattern) {\n\t\treturn wrapRelativePattern(parsedPattern, arg1);\n\t}\n\n\t// Check for Trivias\n\tlet match: RegExpExecArray | null;\n\tif (T1.test(pattern)) { // common pattern: **/*.txt just need endsWith check\n\t\tconst base = pattern.substr(4); // '**/*'.length === 4\n\t\tparsedPattern = function (path, basename) {\n\t\t\treturn typeof path === 'string' && strings.endsWith(path, base) ? pattern : null;\n\t\t};\n\t} else if (match = T2.exec(trimForExclusions(pattern, options))) { // common pattern: **/some.txt just need basename check\n\t\tparsedPattern = trivia2(match[1], pattern);\n\t} else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) { // repetition of common patterns (see above) {**/*.txt,**/*.png}\n\t\tparsedPattern = trivia3(pattern, options);\n\t} else if (match = T4.exec(trimForExclusions(pattern, options))) { // common pattern: **/something/else just need endsWith check\n\t\tparsedPattern = trivia4and5(match[1].substr(1), pattern, true);\n\t} else if (match = T5.exec(trimForExclusions(pattern, options))) { // common pattern: something/else just need equals check\n\t\tparsedPattern = trivia4and5(match[1], pattern, false);\n\t}\n\n\t// Otherwise convert to pattern\n\telse {\n\t\tparsedPattern = toRegExp(pattern);\n\t}\n\n\t// Cache\n\tCACHE.set(patternKey, parsedPattern);\n\n\treturn wrapRelativePattern(parsedPattern, arg1);\n}\n\nfunction wrapRelativePattern(parsedPattern: ParsedStringPattern, arg2: string | IRelativePattern): ParsedStringPattern {\n\tif (typeof arg2 === 'string') {\n\t\treturn parsedPattern;\n\t}\n\n\treturn function (path, basename) {\n\t\tif (!extpath.isEqualOrParent(path, arg2.base)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parsedPattern(paths.relative(arg2.base, path), basename);\n\t};\n}\n\nfunction trimForExclusions(pattern: string, options: IGlobOptions): string {\n\treturn options.trimForExclusions && strings.endsWith(pattern, '/**') ? pattern.substr(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later\n}\n\n// common pattern: **/some.txt just need basename check\nfunction trivia2(base: string, originalPattern: string): ParsedStringPattern {\n\tconst slashBase = `/${base}`;\n\tconst backslashBase = `\\\\${base}`;\n\tconst parsedPattern: ParsedStringPattern = function (path, basename) {\n\t\tif (typeof path !== 'string') {\n\t\t\treturn null;\n\t\t}\n\t\tif (basename) {\n\t\t\treturn basename === base ? originalPattern : null;\n\t\t}\n\t\treturn path === base || strings.endsWith(path, slashBase) || strings.endsWith(path, backslashBase) ? originalPattern : null;\n\t};\n\tconst basenames = [base];\n\tparsedPattern.basenames = basenames;\n\tparsedPattern.patterns = [originalPattern];\n\tparsedPattern.allBasenames = basenames;\n\treturn parsedPattern;\n}\n\n// repetition of common patterns (see above) {**/*.txt,**/*.png}\nfunction trivia3(pattern: string, options: IGlobOptions): ParsedStringPattern {\n\tconst parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1).split(',')\n\t\t.map(pattern => parsePattern(pattern, options))\n\t\t.filter(pattern => pattern !== NULL), pattern);\n\tconst n = parsedPatterns.length;\n\tif (!n) {\n\t\treturn NULL;\n\t}\n\tif (n === 1) {\n\t\treturn <ParsedStringPattern>parsedPatterns[0];\n\t}\n\tconst parsedPattern: ParsedStringPattern = function (path: string, basename: string) {\n\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\tif ((<ParsedStringPattern>parsedPatterns[i])(path, basename)) {\n\t\t\t\treturn pattern;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tconst withBasenames = arrays.first(parsedPatterns, pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\tif (withBasenames) {\n\t\tparsedPattern.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t}\n\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\tif (allPaths.length) {\n\t\tparsedPattern.allPaths = allPaths;\n\t}\n\treturn parsedPattern;\n}\n\n// common patterns: **/something/else just need endsWith check, something/else just needs and equals check\nfunction trivia4and5(path: string, pattern: string, matchPathEnds: boolean): ParsedStringPattern {\n\tconst nativePath = paths.sep !== paths.posix.sep ? path.replace(ALL_FORWARD_SLASHES, paths.sep) : path;\n\tconst nativePathEnd = paths.sep + nativePath;\n\tconst parsedPattern: ParsedStringPattern = matchPathEnds ? function (path, basename) {\n\t\treturn typeof path === 'string' && (path === nativePath || strings.endsWith(path, nativePathEnd)) ? pattern : null;\n\t} : function (path, basename) {\n\t\treturn typeof path === 'string' && path === nativePath ? pattern : null;\n\t};\n\tparsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + path];\n\treturn parsedPattern;\n}\n\nfunction toRegExp(pattern: string): ParsedStringPattern {\n\ttry {\n\t\tconst regExp = new RegExp(`^${parseRegExp(pattern)}$`);\n\t\treturn function (path: string, basename: string) {\n\t\t\tregExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\n\t\t\treturn typeof path === 'string' && regExp.test(path) ? pattern : null;\n\t\t};\n\t} catch (error) {\n\t\treturn NULL;\n\t}\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function match(pattern: string | IRelativePattern, path: string): boolean;\nexport function match(expression: IExpression, path: string, hasSibling?: (name: string) => boolean): string /* the matching pattern */;\nexport function match(arg1: string | IExpression | IRelativePattern, path: string, hasSibling?: (name: string) => boolean): any {\n\tif (!arg1 || typeof path !== 'string') {\n\t\treturn false;\n\t}\n\n\treturn parse(<IExpression>arg1)(path, undefined, hasSibling);\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function parse(pattern: string | IRelativePattern, options?: IGlobOptions): ParsedPattern;\nexport function parse(expression: IExpression, options?: IGlobOptions): ParsedExpression;\nexport function parse(arg1: string | IExpression | IRelativePattern, options: IGlobOptions = {}): any {\n\tif (!arg1) {\n\t\treturn FALSE;\n\t}\n\n\t// Glob with String\n\tif (typeof arg1 === 'string' || isRelativePattern(arg1)) {\n\t\tconst parsedPattern = parsePattern(arg1 as string | IRelativePattern, options);\n\t\tif (parsedPattern === NULL) {\n\t\t\treturn FALSE;\n\t\t}\n\t\tconst resultPattern = function (path: string, basename: string) {\n\t\t\treturn !!parsedPattern(path, basename);\n\t\t};\n\t\tif (parsedPattern.allBasenames) {\n\t\t\t(<ParsedStringPattern><any>resultPattern).allBasenames = parsedPattern.allBasenames;\n\t\t}\n\t\tif (parsedPattern.allPaths) {\n\t\t\t(<ParsedStringPattern><any>resultPattern).allPaths = parsedPattern.allPaths;\n\t\t}\n\t\treturn resultPattern;\n\t}\n\n\t// Glob with Expression\n\treturn parsedExpression(<IExpression>arg1, options);\n}\n\nexport function hasSiblingPromiseFn(siblingsFn?: () => Promise<string[]>) {\n\tif (!siblingsFn) {\n\t\treturn undefined;\n\t}\n\n\tlet siblings: Promise<Record<string, true>>;\n\treturn (name: string) => {\n\t\tif (!siblings) {\n\t\t\tsiblings = (siblingsFn() || Promise.resolve([]))\n\t\t\t\t.then(list => list ? listToMap(list) : {});\n\t\t}\n\t\treturn siblings.then(map => !!map[name]);\n\t};\n}\n\nexport function hasSiblingFn(siblingsFn?: () => string[]) {\n\tif (!siblingsFn) {\n\t\treturn undefined;\n\t}\n\n\tlet siblings: Record<string, true>;\n\treturn (name: string) => {\n\t\tif (!siblings) {\n\t\t\tconst list = siblingsFn();\n\t\t\tsiblings = list ? listToMap(list) : {};\n\t\t}\n\t\treturn !!siblings[name];\n\t};\n}\n\nfunction listToMap(list: string[]) {\n\tconst map: Record<string, true> = {};\n\tfor (const key of list) {\n\t\tmap[key] = true;\n\t}\n\treturn map;\n}\n\nexport function isRelativePattern(obj: any): obj is IRelativePattern {\n\tconst rp = obj as IRelativePattern;\n\n\treturn rp && typeof rp.base === 'string' && typeof rp.pattern === 'string';\n}\n\n/**\n * Same as `parse`, but the ParsedExpression is guaranteed to return a Promise\n */\nexport function parseToAsync(expression: IExpression, options?: IGlobOptions): ParsedExpression {\n\tconst parsedExpression = parse(expression, options);\n\treturn (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | null | Promise<string | null> => {\n\t\tconst result = parsedExpression(path, basename, hasSibling);\n\t\treturn isThenable(result) ? result : Promise.resolve(result);\n\t};\n}\n\nexport function getBasenameTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n\treturn (<ParsedStringPattern>patternOrExpression).allBasenames || [];\n}\n\nexport function getPathTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n\treturn (<ParsedStringPattern>patternOrExpression).allPaths || [];\n}\n\nfunction parsedExpression(expression: IExpression, options: IGlobOptions): ParsedExpression {\n\tconst parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression)\n\t\t.map(pattern => parseExpressionPattern(pattern, expression[pattern], options))\n\t\t.filter(pattern => pattern !== NULL));\n\n\tconst n = parsedPatterns.length;\n\tif (!n) {\n\t\treturn NULL;\n\t}\n\n\tif (!parsedPatterns.some(parsedPattern => !!(<ParsedExpressionPattern>parsedPattern).requiresSiblings)) {\n\t\tif (n === 1) {\n\t\t\treturn <ParsedStringPattern>parsedPatterns[0];\n\t\t}\n\n\t\tconst resultExpression: ParsedStringPattern = function (path: string, basename: string) {\n\t\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\t\t// Pattern matches path\n\t\t\t\tconst result = (<ParsedStringPattern>parsedPatterns[i])(path, basename);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tconst withBasenames = arrays.first(parsedPatterns, pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\t\tif (withBasenames) {\n\t\t\tresultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t\t}\n\n\t\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\t\tif (allPaths.length) {\n\t\t\tresultExpression.allPaths = allPaths;\n\t\t}\n\n\t\treturn resultExpression;\n\t}\n\n\tconst resultExpression: ParsedStringPattern = function (path: string, basename: string, hasSibling?: (name: string) => boolean | Promise<boolean>) {\n\t\tlet name: string | undefined = undefined;\n\n\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\t// Pattern matches path\n\t\t\tconst parsedPattern = (<ParsedExpressionPattern>parsedPatterns[i]);\n\t\t\tif (parsedPattern.requiresSiblings && hasSibling) {\n\t\t\t\tif (!basename) {\n\t\t\t\t\tbasename = paths.basename(path);\n\t\t\t\t}\n\t\t\t\tif (!name) {\n\t\t\t\t\tname = basename.substr(0, basename.length - paths.extname(path).length);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = parsedPattern(path, basename, name, hasSibling);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tconst withBasenames = arrays.first(parsedPatterns, pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\tif (withBasenames) {\n\t\tresultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t}\n\n\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\tif (allPaths.length) {\n\t\tresultExpression.allPaths = allPaths;\n\t}\n\n\treturn resultExpression;\n}\n\nfunction parseExpressionPattern(pattern: string, value: any, options: IGlobOptions): (ParsedStringPattern | ParsedExpressionPattern) {\n\tif (value === false) {\n\t\treturn NULL; // pattern is disabled\n\t}\n\n\tconst parsedPattern = parsePattern(pattern, options);\n\tif (parsedPattern === NULL) {\n\t\treturn NULL;\n\t}\n\n\t// Expression Pattern is <boolean>\n\tif (typeof value === 'boolean') {\n\t\treturn parsedPattern;\n\t}\n\n\t// Expression Pattern is <SiblingClause>\n\tif (value) {\n\t\tconst when = (<SiblingClause>value).when;\n\t\tif (typeof when === 'string') {\n\t\t\tconst result: ParsedExpressionPattern = (path: string, basename: string, name: string, hasSibling: (name: string) => boolean | Promise<boolean>) => {\n\t\t\t\tif (!hasSibling || !parsedPattern(path, basename)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst clausePattern = when.replace('$(basename)', name);\n\t\t\t\tconst matched = hasSibling(clausePattern);\n\t\t\t\treturn isThenable(matched) ?\n\t\t\t\t\tmatched.then(m => m ? pattern : null) :\n\t\t\t\t\tmatched ? pattern : null;\n\t\t\t};\n\t\t\tresult.requiresSiblings = true;\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t// Expression is Anything\n\treturn parsedPattern;\n}\n\nfunction aggregateBasenameMatches(parsedPatterns: Array<ParsedStringPattern | ParsedExpressionPattern>, result?: string): Array<ParsedStringPattern | ParsedExpressionPattern> {\n\tconst basenamePatterns = parsedPatterns.filter(parsedPattern => !!(<ParsedStringPattern>parsedPattern).basenames);\n\tif (basenamePatterns.length < 2) {\n\t\treturn parsedPatterns;\n\t}\n\n\tconst basenames = basenamePatterns.reduce<string[]>((all, current) => {\n\t\tconst basenames = (<ParsedStringPattern>current).basenames;\n\t\treturn basenames ? all.concat(basenames) : all;\n\t}, <string[]>[]);\n\tlet patterns: string[];\n\tif (result) {\n\t\tpatterns = [];\n\t\tfor (let i = 0, n = basenames.length; i < n; i++) {\n\t\t\tpatterns.push(result);\n\t\t}\n\t} else {\n\t\tpatterns = basenamePatterns.reduce((all, current) => {\n\t\t\tconst patterns = (<ParsedStringPattern>current).patterns;\n\t\t\treturn patterns ? all.concat(patterns) : all;\n\t\t}, <string[]>[]);\n\t}\n\tconst aggregate: ParsedStringPattern = function (path, basename) {\n\t\tif (typeof path !== 'string') {\n\t\t\treturn null;\n\t\t}\n\t\tif (!basename) {\n\t\t\tlet i: number;\n\t\t\tfor (i = path.length; i > 0; i--) {\n\t\t\t\tconst ch = path.charCodeAt(i - 1);\n\t\t\t\tif (ch === CharCode.Slash || ch === CharCode.Backslash) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbasename = path.substr(i);\n\t\t}\n\t\tconst index = basenames.indexOf(basename);\n\t\treturn index !== -1 ? patterns[index] : null;\n\t};\n\taggregate.basenames = basenames;\n\taggregate.patterns = patterns;\n\taggregate.allBasenames = basenames;\n\n\tconst aggregatedPatterns = parsedPatterns.filter(parsedPattern => !(<ParsedStringPattern>parsedPattern).basenames);\n\taggregatedPatterns.push(aggregate);\n\treturn aggregatedPatterns;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extpath from 'vs/base/common/extpath';\nimport * as paths from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { equalsIgnoreCase } from 'vs/base/common/strings';\nimport { Schemas } from 'vs/base/common/network';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { ParsedExpression, IExpression, parse } from 'vs/base/common/glob';\nimport { TernarySearchTree } from 'vs/base/common/map';\n\nexport function getComparisonKey(resource: URI): string {\n\treturn hasToIgnoreCase(resource) ? resource.toString().toLowerCase() : resource.toString();\n}\n\nexport function hasToIgnoreCase(resource: URI | undefined): boolean {\n\t// A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n\t// Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n\treturn resource && resource.scheme === Schemas.file ? !isLinux : true;\n}\n\nexport function basenameOrAuthority(resource: URI): string {\n\treturn basename(resource) || resource.authority;\n}\n\n/**\n * Tests whether a `candidate` URI is a parent or equal of a given `base` URI.\n * @param base A uri which is \"longer\"\n * @param parentCandidate A uri which is \"shorter\" then `base`\n */\nexport function isEqualOrParent(base: URI, parentCandidate: URI, ignoreCase = hasToIgnoreCase(base)): boolean {\n\tif (base.scheme === parentCandidate.scheme) {\n\t\tif (base.scheme === Schemas.file) {\n\t\t\treturn extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), ignoreCase);\n\t\t}\n\t\tif (isEqualAuthority(base.authority, parentCandidate.authority)) {\n\t\t\treturn extpath.isEqualOrParent(base.path, parentCandidate.path, ignoreCase, '/');\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Tests wheter the two authorities are the same\n */\nexport function isEqualAuthority(a1: string, a2: string) {\n\treturn a1 === a2 || equalsIgnoreCase(a1, a2);\n}\n\nexport function isEqual(first: URI | undefined, second: URI | undefined, ignoreCase = hasToIgnoreCase(first)): boolean {\n\tif (first === second) {\n\t\treturn true;\n\t}\n\n\tif (!first || !second) {\n\t\treturn false;\n\t}\n\n\tif (first.scheme !== second.scheme || !isEqualAuthority(first.authority, second.authority)) {\n\t\treturn false;\n\t}\n\n\tconst p1 = first.path || '/', p2 = second.path || '/';\n\treturn p1 === p2 || ignoreCase && equalsIgnoreCase(p1 || '/', p2 || '/');\n}\n\nexport function basename(resource: URI): string {\n\treturn paths.posix.basename(resource.path);\n}\n\nexport function extname(resource: URI): string {\n\treturn paths.posix.extname(resource.path);\n}\n\n/**\n * Return a URI representing the directory of a URI path.\n *\n * @param resource The input URI.\n * @returns The URI representing the directory of the input URI.\n */\nexport function dirname(resource: URI): URI {\n\tif (resource.path.length === 0) {\n\t\treturn resource;\n\t}\n\tif (resource.scheme === Schemas.file) {\n\t\treturn URI.file(paths.dirname(originalFSPath(resource)));\n\t}\n\tlet dirname = paths.posix.dirname(resource.path);\n\tif (resource.authority && dirname.length && dirname.charCodeAt(0) !== CharCode.Slash) {\n\t\tconsole.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n\t\tdirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n\t}\n\treturn resource.with({\n\t\tpath: dirname\n\t});\n}\n\n/**\n * Join a URI path with path fragments and normalizes the resulting path.\n *\n * @param resource The input URI.\n * @param pathFragment The path fragment to add to the URI path.\n * @returns The resulting URI.\n */\nexport function joinPath(resource: URI, ...pathFragment: string[]): URI {\n\tlet joinedPath: string;\n\tif (resource.scheme === Schemas.file) {\n\t\tjoinedPath = URI.file(paths.join(originalFSPath(resource), ...pathFragment)).path;\n\t} else {\n\t\tjoinedPath = paths.posix.join(resource.path || '/', ...pathFragment);\n\t}\n\treturn resource.with({\n\t\tpath: joinedPath\n\t});\n}\n\n/**\n * Normalizes the path part of a URI: Resolves `.` and `..` elements with directory names.\n *\n * @param resource The URI to normalize the path.\n * @returns The URI with the normalized path.\n */\nexport function normalizePath(resource: URI): URI {\n\tif (!resource.path.length) {\n\t\treturn resource;\n\t}\n\tlet normalizedPath: string;\n\tif (resource.scheme === Schemas.file) {\n\t\tnormalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n\t} else {\n\t\tnormalizedPath = paths.posix.normalize(resource.path);\n\t}\n\treturn resource.with({\n\t\tpath: normalizedPath\n\t});\n}\n\n/**\n * Returns the fsPath of an URI where the drive letter is not normalized.\n * See #56403.\n */\nexport function originalFSPath(uri: URI): string {\n\tlet value: string;\n\tconst uriPath = uri.path;\n\tif (uri.authority && uriPath.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uriPath}`;\n\t} else if (\n\t\tisWindows\n\t\t&& uriPath.charCodeAt(0) === CharCode.Slash\n\t\t&& extpath.isWindowsDriveLetter(uriPath.charCodeAt(1))\n\t\t&& uriPath.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tvalue = uriPath.substr(1);\n\t} else {\n\t\t// other path\n\t\tvalue = uriPath;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Returns true if the URI path is absolute.\n */\nexport function isAbsolutePath(resource: URI): boolean {\n\treturn !!resource.path && resource.path[0] === '/';\n}\n\n/**\n * Returns true if the URI path has a trailing path separator\n */\nexport function hasTrailingPathSeparator(resource: URI): boolean {\n\tif (resource.scheme === Schemas.file) {\n\t\tconst fsp = originalFSPath(resource);\n\t\treturn fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === paths.sep;\n\t} else {\n\t\tconst p = resource.path;\n\t\treturn p.length > 1 && p.charCodeAt(p.length - 1) === CharCode.Slash; // ignore the slash at offset 0\n\t}\n}\n\n\n/**\n * Removes a trailing path seperator, if theres one.\n * Important: Doesn't remove the first slash, it would make the URI invalid\n */\nexport function removeTrailingPathSeparator(resource: URI): URI {\n\tif (hasTrailingPathSeparator(resource)) {\n\t\treturn resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n\t}\n\treturn resource;\n}\n\n\n/**\n * Returns a relative path between two URIs. If the URIs don't have the same schema or authority, `undefined` is returned.\n * The returned relative path always uses forward slashes.\n */\nexport function relativePath(from: URI, to: URI): string | undefined {\n\tif (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n\t\treturn undefined;\n\t}\n\tif (from.scheme === Schemas.file) {\n\t\tconst relativePath = paths.relative(from.path, to.path);\n\t\treturn isWindows ? extpath.toSlashes(relativePath) : relativePath;\n\t}\n\treturn paths.posix.relative(from.path || '/', to.path || '/');\n}\n\n/**\n * Resolves a absolute or relative path against a base URI.\n */\nexport function resolvePath(base: URI, path: string): URI {\n\tlet resolvedPath: string;\n\tif (base.scheme === Schemas.file) {\n\t\tresolvedPath = URI.file(paths.resolve(originalFSPath(base), path)).path;\n\t} else {\n\t\tresolvedPath = paths.posix.resolve(base.path, path);\n\t}\n\treturn base.with({\n\t\tpath: resolvedPath\n\t});\n}\n\nexport function distinctParents<T>(items: T[], resourceAccessor: (item: T) => URI): T[] {\n\tconst distinctParents: T[] = [];\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst candidateResource = resourceAccessor(items[i]);\n\t\tif (items.some((otherItem, index) => {\n\t\t\tif (index === i) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEqualOrParent(candidateResource, resourceAccessor(otherItem));\n\t\t})) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdistinctParents.push(items[i]);\n\t}\n\n\treturn distinctParents;\n}\n\n/**\n * Data URI related helpers.\n */\nexport namespace DataUri {\n\n\texport const META_DATA_LABEL = 'label';\n\texport const META_DATA_DESCRIPTION = 'description';\n\texport const META_DATA_SIZE = 'size';\n\texport const META_DATA_MIME = 'mime';\n\n\texport function parseMetaData(dataUri: URI): Map<string, string> {\n\t\tconst metadata = new Map<string, string>();\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n\t\tconst meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n\t\tmeta.split(';').forEach(property => {\n\t\t\tconst [key, value] = property.split(':');\n\t\t\tif (key && value) {\n\t\t\t\tmetadata.set(key, value);\n\t\t\t}\n\t\t});\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the mime is: image/png\n\t\tconst mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n\t\tif (mime) {\n\t\t\tmetadata.set(META_DATA_MIME, mime);\n\t\t}\n\n\t\treturn metadata;\n\t}\n}\n\n\nexport class ResourceGlobMatcher {\n\n\tprivate readonly globalExpression: ParsedExpression;\n\tprivate readonly expressionsByRoot: TernarySearchTree<{ root: URI, expression: ParsedExpression }> = TernarySearchTree.forPaths<{ root: URI, expression: ParsedExpression }>();\n\n\tconstructor(\n\t\tglobalExpression: IExpression,\n\t\trootExpressions: { root: URI, expression: IExpression }[]\n\t) {\n\t\tthis.globalExpression = parse(globalExpression);\n\t\tfor (const expression of rootExpressions) {\n\t\t\tthis.expressionsByRoot.set(expression.root.toString(), { root: expression.root, expression: parse(expression.expression) });\n\t\t}\n\t}\n\n\tmatches(resource: URI): boolean {\n\t\tconst rootExpression = this.expressionsByRoot.findSubstr(resource.toString());\n\t\tif (rootExpression) {\n\t\t\tconst path = relativePath(rootExpression.root, resource);\n\t\t\tif (path && !!rootExpression.expression(path)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn !!this.globalExpression(resource.path);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMirrorModel, IWorkerContext } from 'vs/editor/common/services/editorSimpleWorker';\nimport { ILink } from 'vs/editor/common/modes';\nimport { URI } from 'vs/base/common/uri';\nimport * as extpath from 'vs/base/common/extpath';\nimport * as resources from 'vs/base/common/resources';\nimport * as strings from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\n\nexport interface ICreateData {\n\tworkspaceFolders: string[];\n}\n\nexport interface IResourceCreator {\n\ttoResource: (folderRelativePath: string) => URI | null;\n}\n\nexport class OutputLinkComputer {\n\tprivate ctx: IWorkerContext;\n\tprivate patterns: Map<URI /* folder uri */, RegExp[]>;\n\n\tconstructor(ctx: IWorkerContext, createData: ICreateData) {\n\t\tthis.ctx = ctx;\n\t\tthis.patterns = new Map<URI, RegExp[]>();\n\n\t\tthis.computePatterns(createData);\n\t}\n\n\tprivate computePatterns(createData: ICreateData): void {\n\n\t\t// Produce patterns for each workspace root we are configured with\n\t\t// This means that we will be able to detect links for paths that\n\t\t// contain any of the workspace roots as segments.\n\t\tconst workspaceFolders = createData.workspaceFolders.map(r => URI.parse(r));\n\t\tworkspaceFolders.forEach(workspaceFolder => {\n\t\t\tconst patterns = OutputLinkComputer.createPatterns(workspaceFolder);\n\t\t\tthis.patterns.set(workspaceFolder, patterns);\n\t\t});\n\t}\n\n\tprivate getModel(uri: string): IMirrorModel | null {\n\t\tconst models = this.ctx.getMirrorModels();\n\t\tfor (const model of models) {\n\t\t\tif (model.uri.toString() === uri) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic computeLinks(uri: string): Promise<ILink[]> {\n\t\tconst model = this.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tconst links: ILink[] = [];\n\t\tconst lines = model.getValue().split(/\\r\\n|\\r|\\n/);\n\n\t\t// For each workspace root patterns\n\t\tthis.patterns.forEach((folderPatterns, folderUri) => {\n\t\t\tconst resourceCreator: IResourceCreator = {\n\t\t\t\ttoResource: (folderRelativePath: string): URI | null => {\n\t\t\t\t\tif (typeof folderRelativePath === 'string') {\n\t\t\t\t\t\treturn resources.joinPath(folderUri, folderRelativePath);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\t\tlinks.push(...OutputLinkComputer.detectLinks(lines[i], i + 1, folderPatterns, resourceCreator));\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.resolve(links);\n\t}\n\n\tpublic static createPatterns(workspaceFolder: URI): RegExp[] {\n\t\tconst patterns: RegExp[] = [];\n\n\t\tconst workspaceFolderPath = workspaceFolder.scheme === Schemas.file ? workspaceFolder.fsPath : workspaceFolder.path;\n\t\tconst workspaceFolderVariants = [workspaceFolderPath];\n\t\tif (isWindows && workspaceFolder.scheme === Schemas.file) {\n\t\t\tworkspaceFolderVariants.push(extpath.toSlashes(workspaceFolderPath));\n\t\t}\n\n\t\tworkspaceFolderVariants.forEach(workspaceFolderVariant => {\n\t\t\tconst validPathCharacterPattern = '[^\\\\s\\\\(\\\\):<>\"]';\n\t\t\tconst validPathCharacterOrSpacePattern = `(?:${validPathCharacterPattern}| ${validPathCharacterPattern})`;\n\t\t\tconst pathPattern = `${validPathCharacterOrSpacePattern}+\\\\.${validPathCharacterPattern}+`;\n\t\t\tconst strictPathPattern = `${validPathCharacterPattern}+`;\n\n\t\t\t// Example: /workspaces/express/server.js on line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}) on line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/express/server.js:line 8, column 13\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern}):line ((\\\\d+)(, column (\\\\d+))?)`, 'gi'));\n\n\t\t\t// Example: /workspaces/mankala/Features.ts(45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45): error\n\t\t\t// Example: /workspaces/mankala/Features.ts(45,18): error\n\t\t\t// Example: /workspaces/mankala/Features.ts (45,18): error\n\t\t\t// Example: /workspaces/mankala/Features Special.ts (45,18): error\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${pathPattern})(\\\\s?\\\\((\\\\d+)(,(\\\\d+))?)\\\\)`, 'gi'));\n\n\t\t\t// Example: at /workspaces/mankala/Game.ts\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336\n\t\t\t// Example: at /workspaces/mankala/Game.ts:336:9\n\t\t\tpatterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceFolderVariant) + `(${strictPathPattern})(:(\\\\d+))?(:(\\\\d+))?`, 'gi'));\n\t\t});\n\n\t\treturn patterns;\n\t}\n\n\t/**\n\t * Detect links. Made public static to allow for tests.\n\t */\n\tpublic static detectLinks(line: string, lineIndex: number, patterns: RegExp[], resourceCreator: IResourceCreator): ILink[] {\n\t\tconst links: ILink[] = [];\n\n\t\tpatterns.forEach(pattern => {\n\t\t\tpattern.lastIndex = 0; // the holy grail of software development\n\n\t\t\tlet match: RegExpExecArray | null;\n\t\t\tlet offset = 0;\n\t\t\twhile ((match = pattern.exec(line)) !== null) {\n\n\t\t\t\t// Convert the relative path information to a resource that we can use in links\n\t\t\t\tconst folderRelativePath = strings.rtrim(match[1], '.').replace(/\\\\/g, '/'); // remove trailing \".\" that likely indicate end of sentence\n\t\t\t\tlet resourceString: string | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst resource = resourceCreator.toResource(folderRelativePath);\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\tresourceString = resource.toString();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tcontinue; // we might find an invalid URI and then we dont want to loose all other links\n\t\t\t\t}\n\n\t\t\t\t// Append line/col information to URI if matching\n\t\t\t\tif (match[3]) {\n\t\t\t\t\tconst lineNumber = match[3];\n\n\t\t\t\t\tif (match[5]) {\n\t\t\t\t\t\tconst columnNumber = match[5];\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1},{2}', resourceString, lineNumber, columnNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresourceString = strings.format('{0}#{1}', resourceString, lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst fullMatch = strings.rtrim(match[0], '.'); // remove trailing \".\" that likely indicate end of sentence\n\n\t\t\t\tconst index = line.indexOf(fullMatch, offset);\n\t\t\t\toffset += index + fullMatch.length;\n\n\t\t\t\tconst linkRange = {\n\t\t\t\t\tstartColumn: index + 1,\n\t\t\t\t\tstartLineNumber: lineIndex,\n\t\t\t\t\tendColumn: index + 1 + fullMatch.length,\n\t\t\t\t\tendLineNumber: lineIndex\n\t\t\t\t};\n\n\t\t\t\tif (links.some(link => Range.areIntersectingOrTouching(link.range, linkRange))) {\n\t\t\t\t\treturn; // Do not detect duplicate links\n\t\t\t\t}\n\n\t\t\t\tlinks.push({\n\t\t\t\t\trange: linkRange,\n\t\t\t\t\turl: resourceString\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn links;\n\t}\n}\n\nexport function create(ctx: IWorkerContext, createData: ICreateData): OutputLinkComputer {\n\treturn new OutputLinkComputer(ctx, createData);\n}\n"]}