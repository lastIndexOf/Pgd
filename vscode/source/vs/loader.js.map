{"version":3,"sources":["vs/vs/loader.js","vs/vs/css.js","vs/vs/nls.js"],"names":["_amdLoaderGlobal","this","_commonjsGlobal","global","AMDLoader","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","replace","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","cspNonce","nodeModules","nodeCachedData","seed","writeDelay","onData","warn","path","undefined","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getConfig","getElementsByTagName","appendChild","self","host","_didInitialize","_didPatchNodeRequire","_hasCreateCachedData","_init","_fs","_vm","_path","_crypto","Script","_initNodeRequire","that","Module","_compile","content","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_processCachedData","opts","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","data","normalizedScriptSrc","normalize","vmScriptSrc","isElectronRenderer","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_err","_loadAndEvalScript","r","globalDefineFunc","getGlobalAMDDefineFunc","receivedDefineCall","localDefineFunc","arguments","amd","call","getGlobalAMDRequireFunc","Error","basedir","hash","createHash","update","digest","basename","join","createCachedData","cachedDataRejected","_runSoon","unlink","cachedDataProduced","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","_nodeRequire_1","what","RequireFunc","DefineFunc","jQuery","_requireFunc_config","doNotInitLoader","CSSLoaderPlugin","BrowserCSSLoader","_pendingLoads","name","linkNode","_insertLinkNode","head","other","insertBefore","createLinkTag","cssUrl","externalCallback","externalErrorback","_linkTagExists","nameAttr","hrefAttr","links","getAttribute","CSSPlugin","_cssLoader","req","NLSLoaderPlugin","_format","message","rest","index","arg","String","isPseudo","createScopedLocalize","scope","idx","defaultValue","restArgs","slice","_isPseudo","location","NLSPlugin","localize","setPseudoTranslation","pluginConfig","language","availableLanguages","findLanguageForModule","suffix","DEFAULT_TAG","messagesLoaded_1","messages","loadBundle"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar _commonjsGlobal = typeof global === 'object' ? global : {};\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = (function () {\n        function Environment() {\n            this._detected = false;\n            this._isWindows = false;\n            this._isNode = false;\n            this._isElectronRenderer = false;\n            this._isWebWorker = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\n            get: function () {\n                this._detect();\n                return this._isWindows;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isNode\", {\n            get: function () {\n                this._detect();\n                return this._isNode;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\n            get: function () {\n                this._detect();\n                return this._isElectronRenderer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\n            get: function () {\n                this._detect();\n                return this._isWebWorker;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isWindows = Environment._isWindows();\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        return NullLoaderEventRecorder;\n    }());\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri).replace(/%23/g, '#');\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return Utilities.startsWith(id, '===anonymous');\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        return Utilities;\n    }());\n    Utilities.NEXT_ANONYMOUS_ID = 1;\n    Utilities.PERFORMANCE_NOW_PROBED = false;\n    Utilities.HAS_PERFORMANCE_NOW = false;\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                options.catchError = false;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (typeof options.cspNonce !== 'string') {\n                options.cspNonce = '';\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedData === 'object') {\n                if (typeof options.nodeCachedData.seed !== 'string') {\n                    options.nodeCachedData.seed = 'seed';\n                }\n                if (typeof options.nodeCachedData.writeDelay !== 'number' || options.nodeCachedData.writeDelay < 0) {\n                    options.nodeCachedData.writeDelay = 1000 * 7;\n                }\n                if (typeof options.nodeCachedData.onData !== 'function') {\n                    options.nodeCachedData.onData = function (err) {\n                        if (err && err.errorCode === 'cachedDataRejected') {\n                            console.warn('Rejected cached data from file: ' + err.path);\n                        }\n                        else if (err && err.errorCode) {\n                            console.error('Problems handling cached data file: ' + err.path);\n                            console.error(err.detail);\n                        }\n                        else if (err) {\n                            console.error(err);\n                        }\n                    };\n                }\n                if (!options.nodeCachedData.path || typeof options.nodeCachedData.path !== 'string') {\n                    options.nodeCachedData.onData('INVALID cached data configuration, \\'path\\' MUST be set');\n                    options.nodeCachedData = undefined;\n                }\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this.options.nodeMain && this._env.isNode) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(env) {\n            this._env = env;\n            this._scriptLoader = null;\n            this._callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            if (!this._scriptLoader) {\n                this._scriptLoader = (this._env.isWebWorker\n                    ? new WorkerScriptLoader()\n                    : this._env.isNode\n                        ? new NodeScriptLoader(this._env)\n                        : new BrowserScriptLoader());\n            }\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            // Propagate CSP nonce to dynamically created script tag.\n            var cspNonce = moduleManager.getConfig().getOptionsLiteral().cspNonce;\n            if (cspNonce) {\n                script.setAttribute('nonce', cspNonce);\n            }\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                let url;\n                if (self.host) {\n                    url = self.host + '/' + scriptSrc;\n                } else {\n                    url = scriptSrc;\n                }\n                importScripts(url);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n            this._hasCreateCachedData = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n            // check for `createCachedData`-api\n            this._hasCreateCachedData = typeof (new this._vm.Script('').createCachedData) === 'function';\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedData = moduleManager.getConfig().getOptionsLiteral().nodeCachedData;\n            if (!nodeCachedData || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedData.seed, nodeCachedData.path, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = !that._hasCreateCachedData;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, _commonjsGlobal, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, wrapper, cachedDataPath, !options.cachedData);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (_this._env.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedData) {\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder, callback, errorback);\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedData.seed, opts.nodeCachedData.path, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (_err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: !_this._hasCreateCachedData && typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback);\n                            _this._processCachedData(moduleManager, script, contents, cachedDataPath_1, !options.cachedData);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback) {\n            // create script, run script\n            recorder.record(31 /* NodeBeginEvaluatingScript */, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            var globalDefineFunc = moduleManager.getGlobalAMDDefineFunc();\n            var receivedDefineCall = false;\n            var localDefineFunc = function () {\n                receivedDefineCall = true;\n                return globalDefineFunc.apply(null, arguments);\n            };\n            localDefineFunc.amd = globalDefineFunc.amd;\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), localDefineFunc, vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(32 /* NodeEndEvaluatingScript */, scriptSrc);\n            if (receivedDefineCall) {\n                callback();\n            }\n            else {\n                errorback(new Error(\"Didn't receive define call in \" + scriptSrc + \"!\"));\n            }\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (seed, basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(seed, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, contents, cachedDataPath, createCachedData) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.unlink(cachedDataPath, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\n                                errorCode: 'unlink',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay / 2);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData(undefined, {\n                    path: cachedDataPath\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\n                                errorCode: 'writeFile',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay);\n            }\n            else if (this._hasCreateCachedData && createCachedData) {\n                // NEW world\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData(undefined, {\n                    path: cachedDataPath\n                });\n                // soon'ish create and save cached data\n                NodeScriptLoader._runSoon(function () {\n                    var data = script.createCachedData(contents);\n                    _this._fs.writeFile(cachedDataPath, data, function (err) {\n                        if (!err) {\n                            return;\n                        }\n                        moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\n                            errorCode: 'writeFile',\n                            path: cachedDataPath,\n                            detail: err\n                        });\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        return NodeScriptLoader;\n    }());\n    NodeScriptLoader._BOM = 0xFEFF;\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env);\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        return ModuleIdResolver;\n    }());\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        return RegularDependency;\n    }());\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    // console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                if (_this._config.options.requireToUrl) {\n                    return _this._config.options.requireToUrl(moduleIdResolver.resolveModule(id));\n                }\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var env = new AMDLoader.Environment();\n    var moduleManager = null;\n    var DefineFunc = function (id, dependencies, callback) {\n        if (typeof id !== 'string') {\n            callback = dependencies;\n            dependencies = id;\n            id = null;\n        }\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n            callback = dependencies;\n            dependencies = null;\n        }\n        if (!dependencies) {\n            dependencies = ['require', 'exports', 'module'];\n        }\n        if (id) {\n            moduleManager.defineModule(id, dependencies, callback, null, null);\n        }\n        else {\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n        }\n    };\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    var _requireFunc_config = function (params, shouldOverwrite) {\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n        moduleManager.configure(params, shouldOverwrite);\n    };\n    var RequireFunc = function () {\n        if (arguments.length === 1) {\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                _requireFunc_config(arguments[0]);\n                return;\n            }\n            if (typeof arguments[0] === 'string') {\n                return moduleManager.synchronousRequire(arguments[0]);\n            }\n        }\n        if (arguments.length === 2 || arguments.length === 3) {\n            if (Array.isArray(arguments[0])) {\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                return;\n            }\n        }\n        throw new Error('Unrecognized require call');\n    };\n    RequireFunc.config = _requireFunc_config;\n    RequireFunc.getConfig = function () {\n        return moduleManager.getConfig().getOptionsLiteral();\n    };\n    RequireFunc.reset = function () {\n        moduleManager = moduleManager.reset();\n    };\n    RequireFunc.getBuildInfo = function () {\n        return moduleManager.getBuildInfo();\n    };\n    RequireFunc.getStats = function () {\n        return moduleManager.getLoaderEvents();\n    };\n    RequireFunc.define = function () {\n        return DefineFunc.apply(null, arguments);\n    };\n    function init() {\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\n                // re-expose node's require function\n                var nodeRequire = function (what) {\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\n                    try {\n                        return _nodeRequire_1(what);\n                    }\n                    finally {\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\n                    }\n                };\n                AMDLoader.global.nodeRequire = nodeRequire;\n                RequireFunc.nodeRequire = nodeRequire;\n                RequireFunc.__$__nodeRequire = nodeRequire;\n            }\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            require = RequireFunc;\n        }\n        else {\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = DefineFunc;\n            }\n            AMDLoader.global.require = RequireFunc;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        // The global variable require can configure the loader\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n            RequireFunc.config(AMDLoader.global.require);\n        }\n        // This define is for the local closure defined in node in the case that the loader is concatenated\n        define = function () {\n            return DefineFunc.apply(null, arguments);\n        };\n        define.amd = DefineFunc.amd;\n        if (typeof doNotInitLoader === 'undefined') {\n            init();\n        }\n    }\n})(AMDLoader || (AMDLoader = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar CSSLoaderPlugin;\n(function (CSSLoaderPlugin) {\n    /**\n     * Known issue:\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\n     */\n    var BrowserCSSLoader = /** @class */ (function () {\n        function BrowserCSSLoader() {\n            this._pendingLoads = 0;\n        }\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            var unbind = function () {\n                linkNode.removeEventListener('load', loadEventListener);\n                linkNode.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            linkNode.addEventListener('load', loadEventListener);\n            linkNode.addEventListener('error', errorEventListener);\n        };\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\n            this._pendingLoads--;\n            callback();\n        };\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            this._pendingLoads--;\n            errorback(err);\n        };\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\n           try {\n                this._pendingLoads++;\n                var head = document.head || document.getElementsByTagName('head')[0];\n                var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\n                if (other.length > 0) {\n                    head.insertBefore(linkNode, other[other.length - 1]);\n                }\n                else {\n                    head.appendChild(linkNode);\n                }\n           } catch (e) {}\n        };\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\n            try {\n                var _this = this;\n                var linkNode = document.createElement('link');\n                linkNode.setAttribute('rel', 'stylesheet');\n                linkNode.setAttribute('type', 'text/css');\n                linkNode.setAttribute('data-name', name);\n                var callback = function () { return _this._onLoad(name, externalCallback); };\n                var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\n                this.attachListeners(name, linkNode, callback, errorback);\n                linkNode.setAttribute('href', cssUrl);\n                return linkNode;\n            } catch (e) {}\n        };\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\n            try {\n                var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\n                for (i = 0, len = links.length; i < len; i++) {\n                    nameAttr = links[i].getAttribute('data-name');\n                    hrefAttr = links[i].getAttribute('href');\n                    if (nameAttr === name || hrefAttr === cssUrl) {\n                        return true;\n                    }\n                }\n            } catch (e) {}\n            return false;\n        };\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            this._insertLinkNode(linkNode);\n        };\n        return BrowserCSSLoader;\n    }());\n    // ------------------------------ Finally, the plugin\n    var CSSPlugin = /** @class */ (function () {\n        function CSSPlugin() {\n            this._cssLoader = new BrowserCSSLoader();\n        }\n        CSSPlugin.prototype.load = function (name, req, load) {\n            var cssUrl = req.toUrl(name + '.css');\n            this._cssLoader.load(name, cssUrl, function (contents) {\n                load({});\n            }, function (err) {\n                if (typeof load.error === 'function') {\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\n                }\n            });\n        };\n        return CSSPlugin;\n    }());\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\n    define('vs/css', new CSSPlugin());\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar NLSLoaderPlugin;\n(function (NLSLoaderPlugin) {\n    var Environment = /** @class */ (function () {\n        function Environment() {\n            this._detected = false;\n            this._isPseudo = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isPseudo\", {\n            get: function () {\n                this._detect();\n                return this._isPseudo;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\n        };\n        return Environment;\n    }());\n    function _format(message, args, env) {\n        var result;\n        if (args.length === 0) {\n            result = message;\n        }\n        else {\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n                var index = rest[0];\n                var arg = args[index];\n                var result = match;\n                if (typeof arg === 'string') {\n                    result = arg;\n                }\n                else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === undefined || arg === null) {\n                    result = String(arg);\n                }\n                return result;\n            });\n        }\n        if (env.isPseudo) {\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n        }\n        return result;\n    }\n    function findLanguageForModule(config, name) {\n        var result = config[name];\n        if (result)\n            return result;\n        result = config['*'];\n        if (result)\n            return result;\n        return null;\n    }\n    function localize(env, data, message) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return _format(message, args, env);\n    }\n    function createScopedLocalize(scope, env) {\n        return function (idx, defaultValue) {\n            var restArgs = Array.prototype.slice.call(arguments, 2);\n            return _format(scope[idx], restArgs, env);\n        };\n    }\n    var NLSPlugin = /** @class */ (function () {\n        function NLSPlugin(env) {\n            var _this = this;\n            this._env = env;\n            this.localize = function (data, message) {\n                var args = [];\n                for (var _i = 2; _i < arguments.length; _i++) {\n                    args[_i - 2] = arguments[_i];\n                }\n                return localize.apply(undefined, [_this._env, data, message].concat(args));\n            };\n        }\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\n            this._env._isPseudo = value;\n        };\n        NLSPlugin.prototype.create = function (key, data) {\n            return {\n                localize: createScopedLocalize(data[key], this._env)\n            };\n        };\n        NLSPlugin.prototype.load = function (name, req, load, config) {\n            var _this = this;\n            config = config || {};\n            if (!name || name.length === 0) {\n                load({\n                    localize: this.localize\n                });\n            }\n            else {\n                var pluginConfig = config['vs/nls'] || {};\n                var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n                var suffix = '.nls';\n                if (language !== null && language !== NLSPlugin.DEFAULT_TAG) {\n                    suffix = suffix + '.' + language;\n                }\n                var messagesLoaded_1 = function (messages) {\n                    if (Array.isArray(messages)) {\n                        messages.localize = createScopedLocalize(messages, _this._env);\n                    }\n                    else {\n                        messages.localize = createScopedLocalize(messages[name], _this._env);\n                    }\n                    load(messages);\n                };\n                if (typeof pluginConfig.loadBundle === 'function') {\n                    pluginConfig.loadBundle(name, language, function (err, messages) {\n                        // We have an error. Load the English default strings to not fail\n                        if (err) {\n                            req([name + '.nls'], messagesLoaded_1);\n                        }\n                        else {\n                            messagesLoaded_1(messages);\n                        }\n                    });\n                }\n                else {\n                    req([name + suffix], messagesLoaded_1);\n                }\n            }\n        };\n        NLSPlugin.DEFAULT_TAG = 'i-default';\n        return NLSPlugin;\n    }());\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\n    define('vs/nls', new NLSPlugin(new Environment()));\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\n"]}