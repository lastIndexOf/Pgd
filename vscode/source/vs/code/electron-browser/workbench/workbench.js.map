{"version":3,"sources":["vs/code/electron-browser/workbench/workbench.js"],"names":["showPartsSplash","configuration","perf","mark","data","partsSplashPath","JSON","parse","require","readFileSync","e","highContrast","baseTheme","undefined","extensionDevelopmentPath","layoutInfo","shellBackground","colorInfo","editorBackground","shellForeground","foreground","style","document","createElement","className","head","appendChild","body","innerHTML","id","splash","sideBarWidth","Math","min","window","innerWidth","activityBarWidth","editorPartMinWidth","folderUri","workspace","titleBarHeight","titleBarBackground","sideBarSide","activityBarBackground","sideBarBackground","statusBarHeight","statusBarBackground","statusBarNoFolderBackground","getLazyEnv","ipc","ipcRenderer","Promise","resolve","handle","setTimeout","console","warn","once","event","shellEnv","clearTimeout","bootstrapWindow","assign","process","env","send","load","workbench","then","main","removeDeveloperKeybindingsAfterLoad","canModifyDOM","windowConfig","beforeLoaderConfig","loaderConfig","recordStats","nodeCachedData","onNodeCachedData","onData","push","arguments","beforeRequire"],"mappings":";;;;AAMA,aA+CA,SAASA,gBAAgBC,GACxBC,KAAKC,KAAK,uBAEV,IAAIC,EACJ,GAA6C,iBAAlCH,EAAcI,gBACxB,IACCD,EAAOE,KAAKC,MAAMC,QAAQ,MAAMC,aAAaR,EAAcI,gBAAiB,SAC3E,MAAOK,IAMNN,GAAQH,EAAcU,cAAmC,aAAnBP,EAAKQ,YAC9CR,OAAOS,GAIJT,GAAQH,EAAca,2BACzBV,EAAKW,gBAAaF,GAInB,MAAMD,EAAYR,EAAOA,EAAKQ,UAAYX,EAAcU,aAAe,WAAa,UAC9EK,EAAkBZ,EAAOA,EAAKa,UAAUC,iBAAmBjB,EAAcU,aAAe,UAAY,UACpGQ,EAAkBf,EAAOA,EAAKa,UAAUG,WAAanB,EAAcU,aAAe,UAAY,UAC9FU,EAAQC,SAASC,cAAc,SAMrC,GALAF,EAAMG,UAAY,qBAClBF,SAASG,KAAKC,YAAYL,GAC1BC,SAASK,KAAKH,0BAA4BZ,IAC1CS,EAAMO,+CAAiDZ,aAA2BG,OAE9Ef,GAAQA,EAAKW,WAAY,CAE5B,MAAMc,GAAEA,EAAEd,WAAEA,EAAUE,UAAEA,GAAcb,EAChC0B,EAASR,SAASC,cAAc,OACtCO,EAAOD,GAAKA,EAGZd,EAAWgB,aAAeC,KAAKC,IAAIlB,EAAWgB,aAAcG,OAAOC,YAAcpB,EAAWqB,iBAAmBrB,EAAWsB;AAEtHpC,EAAcqC,WAAarC,EAAcsC,UAE5CT,EAAOF,2FACiEb,EAAWyB,uCAAuCvB,EAAUwB,oHAC9E1B,EAAWyB,2BAA2BzB,EAAWyB,qBAAqBzB,EAAW2B,0BAA0B3B,EAAWqB,yCAAyCnB,EAAU0B,6FACzK5B,EAAWyB,2BAA2BzB,EAAWyB,qBAAqBzB,EAAW2B,gBAAgB3B,EAAWqB,8BAA8BrB,EAAWgB,qCAAqCd,EAAU2B,8GAC/K7B,EAAW8B,wCAAwC5B,EAAU6B,uCAIxIhB,EAAOF,2FACiEb,EAAWyB,uCAAuCvB,EAAUwB,oHAC9E1B,EAAWyB,2BAA2BzB,EAAWyB,qBAAqBzB,EAAW2B,0BAA0B3B,EAAWqB,yCAAyCnB,EAAU0B,kHACpJ5B,EAAW8B,wCAAwC5B,EAAU8B;AAGzIzB,SAASK,KAAKD,YAAYI,GAG3B5B,KAAKC,KAAK,sBAMX,SAAS6C,aAER,MAAMC,EAAMzC,QAAQ,YAAY0C,YAEhC,OAAO,IAAIC,QAAQ,SAAUC,GAC5B,MAAMC,EAASC,WAAW,WACzBF,IACAG,QAAQC,KAAK,6CACX,KAEHP,EAAIQ,KAAK,wBAAyB,SAAUC,EAAOC,GAClDC,aAAaP,GACbQ,gBAAgBC,OAAOC,QAAQC,IAAKL,GAEpCP,EAAQW,QAAQC,OAGjBf,EAAIgB,KAAK,0BAhIX,MAAM/D,KAAOM,QAAQ,oCACrBN,KAAKC,KAAK,oBAEV,MAAM0D,gBAAkBrD,QAAQ,gCAGhCuD,QAAiB,QAAIf,aAGrBa,gBAAgBK,MACf,8BACA,qCACA,sCAEA,SAAUC,EAAWlE,GAGpB,OAFAC,KAAKC,KAAK,wBAEH4D,QAAiB,QAAEK,KAAK,WAI9B,OAHAlE,KAAKC,KAAK,gBAGHK,QAAQ,sCAAsC6D,KAAKpE,OAG3DqE,qCAAqC,EACrCC,aAAc,SAAUC,GACvBxE,gBAAgBwE,IAEjBC,mBAAoB,SAAUD,EAAcE;AAE3C,GADAA,EAAaC,cAAgBH,EAAa,gBACtCE,EAAaE,eAAgB,CAChC,MAAMC,EAAmB3C,OAA0B,kBAAE2C,oBACrDH,EAAaE,eAAeE,OAAS,WACpCD,EAAiBE,KAAKC,cAIzBC,cAAe,WACd/E,KAAKC,KAAK","file":"workbench.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst perf = require('../../../base/common/performance');\nperf.mark('renderer/started');\n\nconst bootstrapWindow = require('../../../../bootstrap-window');\n\n// Setup shell environment\nprocess['lazyEnv'] = getLazyEnv();\n\n// Load workbench main\nbootstrapWindow.load([\n\t'vs/workbench/workbench.main',\n\t'vs/nls!vs/workbench/workbench.main',\n\t'vs/css!vs/workbench/workbench.main'\n],\n\tfunction (workbench, configuration) {\n\t\tperf.mark('didLoadWorkbenchMain');\n\n\t\treturn process['lazyEnv'].then(function () {\n\t\t\tperf.mark('main/startup');\n\n\t\t\t// @ts-ignore\n\t\t\treturn require('vs/workbench/electron-browser/main').main(configuration);\n\t\t});\n\t}, {\n\t\tremoveDeveloperKeybindingsAfterLoad: true,\n\t\tcanModifyDOM: function (windowConfig) {\n\t\t\tshowPartsSplash(windowConfig);\n\t\t},\n\t\tbeforeLoaderConfig: function (windowConfig, loaderConfig) {\n\t\t\tloaderConfig.recordStats = !!windowConfig['prof-modules'];\n\t\t\tif (loaderConfig.nodeCachedData) {\n\t\t\t\tconst onNodeCachedData = window['MonacoEnvironment'].onNodeCachedData = [];\n\t\t\t\tloaderConfig.nodeCachedData.onData = function () {\n\t\t\t\t\tonNodeCachedData.push(arguments);\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\tbeforeRequire: function () {\n\t\t\tperf.mark('willLoadWorkbenchMain');\n\t\t}\n\t});\n\n/**\n * @param {object} configuration\n */\nfunction showPartsSplash(configuration) {\n\tperf.mark('willShowPartsSplash');\n\n\tlet data;\n\tif (typeof configuration.partsSplashPath === 'string') {\n\t\ttry {\n\t\t\tdata = JSON.parse(require('fs').readFileSync(configuration.partsSplashPath, 'utf8'));\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\t// high contrast mode has been turned on from the outside, e.g OS -> ignore stored colors and layouts\n\tif (data && configuration.highContrast && data.baseTheme !== 'hc-black') {\n\t\tdata = undefined;\n\t}\n\n\t// developing an extension -> ignore stored layouts\n\tif (data && configuration.extensionDevelopmentPath) {\n\t\tdata.layoutInfo = undefined;\n\t}\n\n\t// minimal color configuration (works with or without persisted data)\n\tconst baseTheme = data ? data.baseTheme : configuration.highContrast ? 'hc-black' : 'vs-dark';\n\tconst shellBackground = data ? data.colorInfo.editorBackground : configuration.highContrast ? '#000000' : '#1E1E1E';\n\tconst shellForeground = data ? data.colorInfo.foreground : configuration.highContrast ? '#FFFFFF' : '#CCCCCC';\n\tconst style = document.createElement('style');\n\tstyle.className = 'initialShellColors';\n\tdocument.head.appendChild(style);\n\tdocument.body.className = `monaco-shell ${baseTheme}`;\n\tstyle.innerHTML = `.monaco-shell { background-color: ${shellBackground}; color: ${shellForeground}; }`;\n\n\tif (data && data.layoutInfo) {\n\t\t// restore parts if possible (we might not always store layout info)\n\t\tconst { id, layoutInfo, colorInfo } = data;\n\t\tconst splash = document.createElement('div');\n\t\tsplash.id = id;\n\n\t\t// ensure there is enough space\n\t\tlayoutInfo.sideBarWidth = Math.min(layoutInfo.sideBarWidth, window.innerWidth - (layoutInfo.activityBarWidth + layoutInfo.editorPartMinWidth));\n\n\t\tif (configuration.folderUri || configuration.workspace) {\n\t\t\t// folder or workspace -> status bar color, sidebar\n\t\t\tsplash.innerHTML = `\n\t\t\t<div style=\"position: absolute; width: 100%; left: 0; top: 0; height: ${layoutInfo.titleBarHeight}px; background-color: ${colorInfo.titleBarBackground}; -webkit-app-region: drag;\"></div>\n\t\t\t<div style=\"position: absolute; height: calc(100% - ${layoutInfo.titleBarHeight}px); top: ${layoutInfo.titleBarHeight}px; ${layoutInfo.sideBarSide}: 0; width: ${layoutInfo.activityBarWidth}px; background-color: ${colorInfo.activityBarBackground};\"></div>\n\t\t\t<div style=\"position: absolute; height: calc(100% - ${layoutInfo.titleBarHeight}px); top: ${layoutInfo.titleBarHeight}px; ${layoutInfo.sideBarSide}: ${layoutInfo.activityBarWidth}px; width: ${layoutInfo.sideBarWidth}px; background-color: ${colorInfo.sideBarBackground};\"></div>\n\t\t\t<div style=\"position: absolute; width: 100%; bottom: 0; left: 0; height: ${layoutInfo.statusBarHeight}px; background-color: ${colorInfo.statusBarBackground};\"></div>\n\t\t\t`;\n\t\t} else {\n\t\t\t// empty -> speical status bar color, no sidebar\n\t\t\tsplash.innerHTML = `\n\t\t\t<div style=\"position: absolute; width: 100%; left: 0; top: 0; height: ${layoutInfo.titleBarHeight}px; background-color: ${colorInfo.titleBarBackground}; -webkit-app-region: drag;\"></div>\n\t\t\t<div style=\"position: absolute; height: calc(100% - ${layoutInfo.titleBarHeight}px); top: ${layoutInfo.titleBarHeight}px; ${layoutInfo.sideBarSide}: 0; width: ${layoutInfo.activityBarWidth}px; background-color: ${colorInfo.activityBarBackground};\"></div>\n\t\t\t<div style=\"position: absolute; width: 100%; bottom: 0; left: 0; height: ${layoutInfo.statusBarHeight}px; background-color: ${colorInfo.statusBarNoFolderBackground};\"></div>\n\t\t\t`;\n\t\t}\n\t\tdocument.body.appendChild(splash);\n\t}\n\n\tperf.mark('didShowPartsSplash');\n}\n\n/**\n * @returns {Promise<void>}\n */\nfunction getLazyEnv() {\n\t// @ts-ignore\n\tconst ipc = require('electron').ipcRenderer;\n\n\treturn new Promise(function (resolve) {\n\t\tconst handle = setTimeout(function () {\n\t\t\tresolve();\n\t\t\tconsole.warn('renderer did not receive lazyEnv in time');\n\t\t}, 10000);\n\n\t\tipc.once('vscode:acceptShellEnv', function (event, shellEnv) {\n\t\t\tclearTimeout(handle);\n\t\t\tbootstrapWindow.assign(process.env, shellEnv);\n\t\t\t// @ts-ignore\n\t\t\tresolve(process.env);\n\t\t});\n\n\t\tipc.send('vscode:fetchShellEnv');\n\t});\n}\n"]}